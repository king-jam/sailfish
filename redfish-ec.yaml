main:
    server_name: "dell_ec"
    #options: "openbmc" | "dell_ec" | "mockup"

listen:
    - http::8080
    - https::8443
    - pprof::9080

# new features needed:
#  - link_model
#  - model update fn
#
# View FN:
#   update etag
#   with formatter
#

views:
  "rootview":
      "Logger": ["module", "root"]
      "Controllers":
        # This is for dynamic runtime instantiation of new chassis as they appear
        - "fn": "AM2"
          "params": {"modelname": "default", "cfgsection": "ec_component_events", "uniquename": "'ec_component_events:' + view.GetURI()"}
      "View":
        - "fn": "with_URI"
          "params": "'/redfish/v1'"
      "Aggregate": "root"
      "ExecPost": [
        "set_hash_value(serviceglobals, 'rootid', uuid)",
        "set_hash_value(serviceglobals, 'rooturi', view.GetURI())",
        "set_hash_value(serviceglobals, 'globalHealthModel', globalHealthModel)",
        "instantiate('testview')",
        "instantiate('chassis')",
        "instantiate('systems')",
        "instantiate('managers')",
        "instantiate('accountservice')",
        "instantiate('roles')",
        "instantiate('accounts')",
        "instantiate('registries')",
        # we will eventually enable sessionservice, but need to do some work in ec.go to enable it first
        #"instantiate('sessionservice')",
      ]

  "testview":
      "Logger": ["module", "testview"]
      "Models":
        "default":  {"unique_name": "'TEST_Unique_Name'", "name": "'TEST_Name'", "'description'": "'TEST_Description'" }
      "Controllers":
      "View":
        - "fn": "with_URI"
          "params": "rooturi + '/testview'"
        - "fn": "PublishResourceUpdatedEventsForModel"
          "params": "default"
      "Aggregate": "testview"

  "chassis":
      "Logger": ["module", "Chassis"]
      "Models":
        "default":  {"members": "array()"}
      "Controllers":
        - "fn": "AM2"
          "params": {"modelname": "default", "cfgsection": "collection", "uniquename": "'collection_' + view.GetURI()", "passthru": {'collection_uri': 'view.GetURI()'} }
      "View":
        - "fn": "with_URI"
          "params": "rooturi + '/Chassis'"
        - "fn": "PublishResourceUpdatedEventsForModel"
          "params": "default"
        - "fn": "stdFormatters"
          "params":
      "Aggregate": "chassis"

  "systems":
      "Logger": ["module", "Systems"]
      "Models":
        "default":  {"members": "array()"}
      "Controllers":
        - "fn": "AM2"
          "params": {"modelname": "default", "cfgsection": "collection", "uniquename": "'collection_' + view.GetURI()", "passthru": {'collection_uri': 'view.GetURI()'} }
      "View":
        - "fn": "with_URI"
          "params": "rooturi + '/Systems'"
        - "fn": "PublishResourceUpdatedEventsForModel"
          "params": "default"
        - "fn": "stdFormatters"
          "params":
      "Aggregate": "systems"

  "managers":
      "Logger": ["module", "Managers"]
      "Models":
        "default":  {"members": "array()"}
      "Controllers":
        - "fn": "AM2"
          "params": {"modelname": "default", "cfgsection": "collection", "uniquename": "'collection_' + view.GetURI()", "passthru": {'collection_uri': 'view.GetURI()'} }
      "View":
        - "fn": "with_URI"
          "params": "rooturi + '/Managers'"
        - "fn": "PublishResourceUpdatedEventsForModel"
          "params": "default"
        - "fn": "stdFormatters"
          "params":
      "Aggregate": "managers"

  "accountservice":
      "Logger": ["module", "AccountService"]
      "Models":
        "default":  {}
      "Controllers":
      "View":
        - "fn": "with_URI"
          "params": "rooturi + '/AccountService' "
        - "fn": "PublishResourceUpdatedEventsForModel"
          "params": "default"
        - "fn": "stdFormatters"
          "params":
      "Aggregate": "accountservice"
      "ExecPost": [
        "set_hash_value(serviceglobals, 'actsvc_id', uuid)",
        "set_hash_value(serviceglobals, 'actsvc_uri', view.GetURI())"]

  "roles":
      "Logger": ["module", "Roles"]
      "Models":
        "default":  {"members": "array()"}
      "Controllers":
        - "fn": "AM2"
          "params": {"modelname": "default", "cfgsection": "collection", "uniquename": "'collection_' + view.GetURI()", "passthru": {'collection_uri': 'view.GetURI()'} }
      "View":
        - "fn": "with_URI"
          "params": "rooturi + '/AccountService/Roles'"
        - "fn": "PublishResourceUpdatedEventsForModel"
          "params": "default"
        - "fn": "stdFormatters"
          "params":
      "Aggregate": "roles"

  "accounts":
      "Logger": ["module", "Accounts"]
      "Models":
        "default":  {"members": "array()"}
      "Controllers":
        - "fn": "AM2"
          "params": {"modelname": "default", "cfgsection": "collection", "uniquename": "'collection_' + view.GetURI()", "passthru": {'collection_uri': 'view.GetURI()'} }
      "View":
        - "fn": "with_URI"
          "params": "rooturi + '/AccountService/Accounts'"
        - "fn": "PublishResourceUpdatedEventsForModel"
          "params": "default"
        - "fn": "stdFormatters"
          "params":
      "Aggregate": "accounts"

  "eventservice":
      "Logger": ["module", "eventservice"]
      "Models":
        "default": {
           "max_milliseconds_to_queue": "500",
           "max_events_to_queue": "20",
           "delivery_retry_attempts": "3",
           "delivery_retry_interval_seconds": "30",
           }
      "Controllers":
      "View":
        - "fn": "with_URI"
          "params": "rooturi + '/EventService'"
        - "fn": "PublishResourceUpdatedEventsForModel"
          "params": "default"
        - "fn": "etag"
          "params": ["max_milliseconds_to_queue", "max_events_to_queue", "delivery_retry_attempts", "delivery_retry_interval_seconds"]
        - "fn": "WithAction"
          "params": {"name": "submit.test.event", "uri": "/Actions/EventService.SubmitTestEvent", "actionFunction": "submittestevent"}
        - "fn": "linkModel"
          "params": {"existing": "default", "linkname": "etag"}
      "Aggregate": "eventservice"

  "subscriptioncollection":
      "Logger": ["module", "eventservice"]
      "Models":
        "default": {"members": "array()"}
      "Controllers":
        - "fn": "AM2"
          "params": {"modelname": "default", "cfgsection": "collection", "uniquename": "'collection_' + view.GetURI()", "passthru": {'collection_uri': 'view.GetURI()'} }
      "View":
        - "fn": "with_URI"
          "params": "eventsvc_uri + '/Subscriptions'"
        - "fn": "PublishResourceUpdatedEventsForModel"
          "params": "default"
        - "fn": "stdFormatters"
          "params":
      "Aggregate": "subscriptioncollection"

  "subscription":
      "Logger": ["module", "eventservice"]
      "Models":
        "default": {
          "destination": "destination",
          "protocol":    "protocol",
          "context":     "context",
          "event_types": "eventTypes",
        }
      "Controllers":
      "View":
        - "fn": "with_URI"
          "params": "eventsvc_uri + '/Subscriptions/' + uuid"
        - "fn": "PublishResourceUpdatedEventsForModel"
          "params": "default"
      "Aggregate": "subscription"

  "sessionservice":
      "Logger": ["module", "session"]
      "Models":
        "default":  {"session_timeout": "30"}
      "Controllers":
        - "fn": "ARMapper"
          "params": {"modelname": "default", "cfgsection": "SessionService", "mappinguniquename": "rooturi + '/SessionService'", "AddToView": "ar_mapper"}
      "View":
        - "fn": "with_URI"
          "params": "rooturi + '/SessionService'"
        - "fn": "PublishResourceUpdatedEventsForModel"
          "params": "default"
        - "fn": "stdFormatters"
          "params":
      "Aggregate": "sessionservice"
      "ExecPost": [
        "set_hash_value(serviceglobals, 'sessionsvc_id', uuid)",
        "set_hash_value(serviceglobals, 'sessionsvc_uri', view.GetURI())",
      ]

  "sessioncollection":
      "Logger": ["module", "session"]
      "Models":
        "default":  {"members": "array()"}
      "Controllers":
        - "fn": "AM2"
          "params": {"modelname": "default", "cfgsection": "collection", "uniquename": "'collection_' + view.GetURI()", "passthru": {'collection_uri': 'view.GetURI()'} }
        - "fn": "ARMapper"
          "params": {"modelname": "default", "cfgsection": "SessionService", "mappinguniquename": "rooturi + '/SessionService/Sessions'", "AddToView": "ar_mapper"}
      "View":
        - "fn": "with_URI"
          "params": "rooturi + '/SessionService/Sessions'"
        - "fn": "PublishResourceUpdatedEventsForModel"
          "params": "default"
        - "fn": "stdFormatters"
          "params":
      "Aggregate": "sessioncollection"

  "session":
      "Logger": ["module", "session"]
      "Models":
      "Controllers":
      "View":
        - "fn": "with_URI"
          "params": "rooturi + '/SessionService/Sessions/' + uuid"
      "Aggregate": "session"

  "registries":
      "Logger": ["module", "registry"]
      "Models":
        "default":  {"members": "array()"}
      "Controllers":
        - "fn": "AM2"
          "params": {"modelname": "default", "cfgsection": "collection", "uniquename": "'collection_' + view.GetURI()", "passthru": {'collection_uri': 'view.GetURI()'} }
      "View":
        - "fn": "with_URI"
          "params": "rooturi + '/Registries'"
        - "fn": "stdFormatters"
          "params":
      "Aggregate": "registry_collection"

  "idrac_registry":
      "Logger": ["module", "registry"]
      "Models":
        "default":  {
          "id":          "'Messages'",
          "description": "'iDRAC Message Registry File locations'",
          "name":        "'iDRAC Message Registry File'",
          "type":        "'iDrac.1.5'",
          "languages":   "array('En')",
          "location":   "location",
        }
      "Controllers":
      "View":
        - "fn": "with_URI"
          "params": "rooturi + '/Registries/Messages'"
        - "fn": "stdFormatters"
          "params":
      "Aggregate": "registry"

  "base_registry":
      "Logger": ["module", "registry"]
      "Models":
        "default":  {
          "id":          "'BaseMessages'",
          "description": "'Base Message Registry File locations'",
          "name":        "'Base Message Registry File'",
          "type":        "'Base.1.0'",
          "languages":   "array('En')",
          "location":   "location",
        }
      "Controllers":
      "View":
        - "fn": "with_URI"
          "params": "rooturi + '/Registries/BaseMessages'"
        - "fn": "stdFormatters"
          "params":
      "Aggregate": "registry"

  "mgr_attr_registry":
      "Logger": ["module", "registry"]
      "Models":
        "default":  {
          "id":          "'ManagerAttributeRegistry'",
          "description": "'Manager Attribute Registry File Locations'",
          "name":        "'Manager Attribute Registry File'",
          "type":        "'ManagerAttributeRegistry.1.0'",
          "languages":   "array('En')",
          "location":   "location",
        }
      "Controllers":
      "View":
        - "fn": "with_URI"
          "params": "rooturi + '/Registries/ManagerAttributeRegistry'"
        - "fn": "stdFormatters"
          "params":
      "Aggregate": "registry"

  "attributes":
      "Logger": ["module", "attributes"]
      "Models":
        "default":  {"unique_name": "FQDD", "unique_name_attr": "FQDD+'.Attributes'", "attributes": "add_attribute_property()"}
      "Controllers":
        - "fn": "ARDumper"
          "params": {"modelname": "default", "AddToView": true, "passthru": {"fqddlist": "array(FQDD)"}}
      "View":
        - "fn": "with_URI"
          "params": "parenturi + '/Attributes'"
        - "fn": "stdFormatters"
          "params":
      "Aggregate": "attributes_uri"

  "manager_cmc_integrated":
      "Logger": ["module", "mgrChassis"]
      "Models":
        "default":  {
            "unique_name": "FQDD", "connect_types_supported": "array()", "manager_for_chassis": "array('/redfish/v1/Chassis/System.Chassis.1')",
            "redundancy_uris": "array(rooturi + '/Managers/' + FQDD + '/Redundancy')" }
      "Controllers":
        - "fn": "ARMapper"
          "params": {"modelname": "default", "cfgsection": "firmware/inventory", "mappinguniquename": "'fw_mapper_manager:' + FQDD ", "AddToView": "ar_mapper_inv"}
        - "fn": "ARMapper"
          "params": {"modelname": "default", "cfgsection": "Managers/CMC.Integrated", "mappinguniquename": "'manager_mapper:' + FQDD ", "AddToView": "ar_mapper"}
        - "fn": "AM2"
          "params": {"modelname": "default", "cfgsection": "health", "uniquename": "'am2_health_manger_' + FQDD", "passthru": {"health_fqdd": "'System.Chassis.1#' + FQDD"} }
      "View":
        - "fn": "linkModel"
          "params": {"existing": "default", "linkname": "health"}
        - "fn": "linkModel"
          "params": {"existing": "default", "linkname": "swinv"}
        - "fn": "linkModel"
          "params": {"existing": "default", "linkname": "etag"}
        - "fn": "withModel"
          "params": {"name": "global_health", "expr": "globalHealthModel"}
        - "fn": "with_URI"
          "params": "rooturi + '/Managers/' + FQDD"
        - "fn": "PublishResourceUpdatedEventsForModel"
          "params": "default"
        - "fn": "stdFormatters"
          "params":
        - "fn": "with_PumpHandledAction"
          "params": {"name": "manager.reset", "uri": "/Actions/Manager.Reset", "timeout": 30}
        - "fn": "with_PumpHandledAction"
          "params": {"name": "manager.resettodefaults", "uri": "/Actions/Oem/DellManager.ResetToDefaults", "timeout": 30}
        - "fn": "with_PumpHandledAction"
          "params": {"name": "manager.forcefailover", "uri": "/Actions/Manager.ForceFailover", "timeout": 30}
        - "fn": "WithAction"
          "params": {"name": "manager.exportsystemconfig", "uri": "/Actions/Oem/EID_674_Manager.ExportSystemConfiguration", "actionFunction": "exportSystemConfiguration"}
        - "fn": "WithAction"
          "params": {"name": "manager.importsystemconfig", "uri": "/Actions/Oem/EID_674_Manager.ImportSystemConfiguration", "actionFunction": "importSystemConfiguration"}
        - "fn": "WithAction"
          "params": {"name": "manager.importsystemconfigpreview", "uri": "/Actions/Oem/EID_674_Manager.ImportSystemConfigurationPreview", "actionFunction": "importSystemConfigurationPreview"}
        - "fn": "etag"
          "params": []
      "Aggregate": "manager_cmc_integrated"
      "ExecPost": [
        # probably should instantiate these in the same place that cmc.integrated.N are instantiated. (ie. flatten the instantiate tree)
        "instantiate('attributes', 'parenturi', rooturi + '/Managers/' + FQDD, 'FQDD', FQDD)",
        "instantiate('logservices', 'FQDD', FQDD)",
        "instantiate('lclogservices', 'FQDD', FQDD)",
        "instantiate('faultlistservices', 'FQDD', FQDD)",
        "instantiate('certificateservices', 'parenturi', view.GetURI())",
        "instantiate('manager_cmc_integrated_redundancy', 'FQDD', FQDD, 'parenturi', view.GetURI())",

        # only instantiate the collection once for cmc.integrated.1
        "FQDD == 'CMC.Integrated.1' && instantiate('lclogentrycollection', 'FQDD', FQDD)",
        "FQDD == 'CMC.Integrated.1' && instantiate('faultlistentrycollection', 'FQDD', FQDD)"
        ]

  "certificateservices":
      "Logger": ["module", "certificateservices"]
      "Models":
        "default":  {}
      "Controllers":
      "View":
        - "fn": "with_URI"
          "params": "parenturi + '/CertificateService'"
        - "fn": "with_PumpHandledAction"
          "params": {"name": "certificates.generatecsr", "uri": "/Actions/DellCertificateService.GenerateCSR", "timeout": 30}
        - "fn": "stdFormatters"
          "params":
      "Aggregate": "certificateservices"
      "ExecPost": [
        "instantiate('certificatecollection', 'parenturi', view.GetURI())",
        ]

  "certificatecollection":
      "Logger": ["module", "certificateservices"]
      "Models":
        "default":  {}
      "Controllers":
        - "fn": "AM2"
          "params": {"modelname": "default", "cfgsection": "collection", "uniquename": "'collection_' + view.GetURI()", "passthru": {'collection_uri': 'view.GetURI()'} }
      "View":
        - "fn": "with_URI"
          "params": "parenturi + '/CertificateInventory'"
        - "fn": "stdFormatters"
          "params":
      "Aggregate": "certificatecollection"

  "certificate":
      "Logger": ["module", "certificate"]
      "Models":
        "default":  {}
      "Controllers":
      "View":
        - "fn": "with_URI"
          "params": "parenturi + '/CertificateInventory'"
          "params": "rooturi + '/Managers/' + ParentFQDD + '/CertificateService/CertificateInventory/' + FQDD"
        - "fn": "stdFormatters"
          "params":
      "Aggregate": "certificate"

  "logservices":
      "Logger": ["module", "lclog"]
      "Models":
        "default":  {"members": "array()"}
      "Controllers":
        - "fn": "AM2"
          "params": {"modelname": "default", "cfgsection": "collection", "uniquename": "'collection_' + view.GetURI()", "passthru": {'collection_uri': 'view.GetURI()'} }
      "View":
        - "fn": "with_URI"
          "params": "rooturi + '/Managers/' + FQDD + '/LogServices'"
        - "fn": "stdFormatters"
          "params":
      "Aggregate": "logservices"

  "lclogservices":
      "Logger": ["module", "lclog"]
      "Controllers":
      "View":
        - "fn": "with_URI"
          "params": "rooturi + '/Managers/' + FQDD + '/LogServices/Lclog'"
      "Aggregate": "lclogservices"

  "lclogentrycollection":
      "Logger": ["module", "lclog"]
      "Models":
        "default":  {"members": "array()"}
      "Controllers":
        - "fn": "AM2"
          "params": {"modelname": "default", "cfgsection": "collection", "uniquename": "'collection_' + view.GetURI()", "passthru": {'collection_uri': 'view.GetURI()'} }
        - "fn": "AM2"
          "params": {"modelname": "default", "cfgsection": "lclog", "uniquename": "'collection_lclog_' + view.GetURI()", "passthru": {'collection_uri': 'view.GetURI()'} }
      "View":
        - "fn": "with_URI"
          "params": "rooturi + '/Managers/' + FQDD + '/Logs/Lclog'"
        - "fn": "stdFormatters"
          "params":
      "Aggregate": "lclogentrycollection"

  "lclogentry":
      "Logger": ["module", "lclog"]
      "Controllers":
      "View":
        - "fn": "with_URI"
          "params": "rooturi + '/Managers/' + FQDD + '/Logs/Lclog/' + uuid"
      "Aggregate": "lclogentry"

  "faultlistservices":
      "Logger": ["module", "lclog"]
      "Controllers":
      "View":
        - "fn": "with_URI"
          "params": "rooturi + '/Managers/' + FQDD + '/LogServices/FaultList'"
      "Aggregate": "faultlistservices"

  "faultlistentrycollection":
      "Logger": ["module", "lclog"]
      "Models":
        "default":  {"members": "array()"}
      "Controllers":
        - "fn": "AM2"
          "params": {"modelname": "default", "cfgsection": "collection", "uniquename": "'collection_' + view.GetURI()", "passthru": {'collection_uri': 'view.GetURI()'} }
      "View":
        - "fn": "with_URI"
          "params": "rooturi + '/Managers/' + FQDD + '/Logs/FaultList'"
        - "fn": "stdFormatters"
          "params":
      "Aggregate": "faultlistentrycollection"


  "faultlistentry":
      "Logger": ["module", "lclog"]
      "Models":
        "default":  {}
      "Controllers":
      "View":
        - "fn": "with_URI"
          "params": "rooturi + '/Managers/' + FQDD + '/Logs/FaultList/' + uuid"
      "Aggregate": "faultlistentry"

  "chassis_cmc_integrated":
      "Logger": ["module", "ChassisCMCInt"]
      "Models":
        "default":  {"unique_name": "FQDD"}
      "Controllers":
        - "fn": "ARMapper"
          # note: this is correct, the chassis model re-uses the managers mapper
          "params": {"modelname": "default", "cfgsection": "Managers/CMC.Integrated", "mappinguniquename": "'cmc_chassis:' + FQDD ", "AddToView": "ar_mapper"}
        - "fn": "AM2"
          "params": {"modelname": "default", "cfgsection": "health", "uniquename": "'am2_health_chassis_' + FQDD", "passthru": {"health_fqdd": "'System.Chassis.1#' + FQDD"} }
      "View":
        - "fn": "withModel"
          "params": {"name": "global_health", "expr": "globalHealthModel"}
        - "fn": "linkModel"
          "params": {"existing": "default", "linkname": "etag"}
        - "fn": "linkModel"
          "params": {"existing": "default", "linkname": "health"}
        - "fn": "with_URI"
          "params": "rooturi + '/Chassis/' + FQDD"
        - "fn": "PublishResourceUpdatedEventsForModel"
          "params": "default"
        - "fn": "stdFormatters"
          "params":
        - "fn": "etag"
          "params": []
      "Aggregate": "chassis_cmc_integrated"
      "ExecPost": [
        "instantiate('attributes', 'parenturi', rooturi + '/Chassis/' + FQDD, 'FQDD', FQDD)"
        ]

  "manager_cmc_integrated_redundancy":
      "Logger": ["module", "ChassisCMCInt/Redundancy"]
      "Models":
        "default":  { "redundancy_set": "array(rooturi + '/Managers/CMC.Integrated.1', rooturi + '/Managers/CMC.Integrated.2')" }
      "Controllers":
        - "fn": "ARMapper"
          # note: this is correct, the redundancy model re-uses the managers mapper
          "params": {"modelname": "default", "cfgsection": "Managers/CMC.Integrated", "mappinguniquename": "'chassis_redundancy:' + parenturi ", "AddToView": "ar_mapper"}
        - "fn": "AM2"
          "params": {"modelname": "default", "cfgsection": "health", "uniquename": "'am2_health_redundancy:' + parenturi", "passthru": {"health_fqdd": "'System.Chassis.1#' + FQDD"} }
      "View":
        - "fn": "linkModel"
          "params": {"existing": "default", "linkname": "health"}
        - "fn": "with_URI"
          "params": "parenturi + '/Redundancy'"
        - "fn": "PublishResourceUpdatedEventsForModel"
          "params": "default"
        - "fn": "withFormatter_formatOdataList"
          "params": "default"
        - "fn": "withFormatter_count"
          "params": "default"
      "Aggregate": "manager_cmc_integrated_redundancy"

  "system_chassis":
      "Logger": ["module", "system_chassis"]
      "Models":
        "default":  {"unique_name": "FQDD", "managed_by": "array(rooturi + '/Managers/CMC.Integrated.1')"}
      "Controllers":
        - "fn": "ARMapper"
          "params": {"modelname": "default", "cfgsection": "Chassis/System.Chassis", "mappinguniquename": "'system_chassis:' + FQDD ", "AddToView": "ar_mapper"}
      "View":
        - "fn": "withModel"
          "params": {"name": "global_health", "expr": "globalHealthModel"}
        - "fn": "with_URI"
          "params": "rooturi + '/Chassis/' + FQDD "
        - "fn": "PublishResourceUpdatedEventsForModel"
          "params": "default"
        - "fn": "stdFormatters"
          "params":
        - "fn": "with_PumpHandledAction"
          "params": {"name": "chassis.reset", "uri": "/Actions/Chassis.Reset", "timeout": 30}
        - "fn": "WithAction"
          "params": {"name": "msmconfigbackup", "uri": "/Actions/Oem/MSMConfigBackup", "actionFunction": "msmConfigBackup"}
        - "fn": "WithAction"
          "params": {"name": "chassis.msmconfigbackup", "uri": "/Actions/Oem/DellChassis.MSMConfigBackup", "actionFunction": "chassisMSMConfigBackup"}
      "Aggregate": "system_chassis"
      "ExecPost": [
        "instantiate('attributes', 'parenturi', rooturi + '/Chassis/' + FQDD, 'FQDD', FQDD)",
        "instantiate('power', 'parenturi', rooturi + '/Chassis/' + FQDD, 'FQDD', FQDD)",
        "instantiate('thermal', 'parenturi', rooturi + '/Chassis/' + FQDD, 'FQDD', FQDD)",
        "instantiate('slotcollection', 'parenturi', rooturi + '/Chassis/' + FQDD, 'FQDD', FQDD)",
        "instantiate('slotconfigcollection', 'parenturi', rooturi + '/Chassis/' + FQDD, 'FQDD', FQDD)",
        ]

  "power":
      "Logger": ["module", "Power"]
      "Models":
        "default":  { "unique_name": "'Power'"}
      "Controllers":
        - "fn": "ARMapper"
          "params": {"modelname": "default", "cfgsection": "Chassis/System.Chassis/Power", "mappinguniquename": "'chassis_power_mapper:' + FQDD", "AddToView": "ar_mapper"}
        - "fn": "AM2"
          "params": {"modelname": "default", "cfgsection": "power_supply_uris", "uniquename": "'am2_psu_uris:' + FQDD" }
        - "fn": "AM2"
          "params": {"modelname": "default", "cfgsection": "power_control_uris", "uniquename": "'am2_control_uris:' + FQDD" }
        - "fn": "AM2"
          "params": {"modelname": "default", "cfgsection": "power_trends_uri", "uniquename": "'am2_trends_uri:' + FQDD" }
      "View":
        - "fn": "withModel"
          "params": {"name": "global_health", "expr": "globalHealthModel"}
        - "fn": "with_URI"
          "params": "parenturi + '/Power'"
        - "fn": "PublishResourceUpdatedEventsForModel"
          "params": "default"
        - "fn": "stdFormatters"
          "params":
      "Aggregate": "power"
      "ExecPost": [
        "instantiate('power_trends', 'FQDD', FQDD)",
        "instantiate('power_histogram', 'FQDD', FQDD, 'trend', 'Hour')",
        "instantiate('power_histogram', 'FQDD', FQDD, 'trend', 'Day')",
        "instantiate('power_histogram', 'FQDD', FQDD, 'trend', 'Week')",
        "instantiate('power_control', 'FQDD', FQDD )",
        ]

  "psu_slot":
      "Logger": ["module", "PSU.Slot"]
      "Models":
        "default":  {"unique_name": "FQDD", "unique_name_attr": "FQDD+'.Attributes'", "attributes": "add_attribute_property()"}
      "Controllers":
        - "fn": "ARMapper"
          "params": {"modelname": "default", "cfgsection": "firmware/inventory", "mappinguniquename": "'fw_mapper:' + ChassisFQDD + '_' + FQDD", "AddToView": "ar_mapper_inv"}
        - "fn": "ARMapper"
          "params": {"modelname": "default", "cfgsection": "PSU/PSU.Slot", "mappinguniquename": "'chassis_psu_mapper:' + ChassisFQDD + '_' + FQDD ", "AddToView": "ar_mapper"}
        - "fn": "AM2"
          "params": {"modelname": "default", "cfgsection": "power_supply", "uniquename": "'am2_chassis_psu_' + FQDD" }
        - "fn": "ARDumper"
          "params": {"modelname": "default", "AddToView": true, "passthru": {"fqddlist": "array(FQDD)"}}
      "View":
        - "fn": "with_URI"
          "params": "rooturi + '/Chassis/' + ChassisFQDD + '/Power/PowerSupplies/' + FQDD "
        - "fn": "linkModel"
          "params": {"existing": "default", "linkname": "swinv"}
        - "fn": "withModel"
          "params": {"name": "global_health", "expr": "globalHealthModel"}
        - "fn": "PublishResourceUpdatedEventsForModel"
          "params": "default"
        - "fn": "stdFormatters"
          "params":
      "Aggregate": "psu_slot"
      "ExecPost": [
        "instantiate('attributes', 'parenturi', rooturi + '/Chassis/' + ChassisFQDD + '/Power/PowerSupplies/' + FQDD, 'FQDD', FQDD)"
        ]

  "power_control":
      "Logger": ["module", "PowerControl"]
      "Models":
        "default":  { "power_related_items": "find_uris_with_basename( rooturi + '/Chassis' )"}
      "Controllers":
        - "fn": "ARMapper"
          "params": {"modelname": "default", "cfgsection": "Chassis/System.Chassis/Power", "mappinguniquename": "'chassis_power_ctrl_mapper:' + FQDD", "AddToView": "ar_mapper"}
        - "fn": "AM2"
          "params": {"modelname": "default", "cfgsection": "power_control", "uniquename": "'am2_chassis_power_control_' + FQDD" }
      "View":
        - "fn": "with_URI"
          "params": "rooturi + '/Chassis/' + FQDD + '/Power/PowerControl'"
        - "fn": "PublishResourceUpdatedEventsForModel"
          "params": "default"
        - "fn": "stdFormatters"
          "params":
      "Aggregate": "power_control"

  "power_trends":
      "Logger": ["module", "PowerTrends"]
      "Models":
        "default":  {}
      "Controllers":
        - "fn": "AM2"
          "params": {"modelname": "default", "cfgsection": "trend_histogram_uris", "uniquename": "'am2_trends_uri:' + FQDD" }
      "View":
        - "fn": "with_URI"
          "params": "rooturi + '/Chassis/' + FQDD + '/Power/PowerTrends-1'"
        - "fn": "PublishResourceUpdatedEventsForModel"
          "params": "default"
        - "fn": "stdFormatters"
          "params":
      "Aggregate": "power_trends"

  "power_histogram":
      "Logger": ["module", "PowerTrends"]
      "Models":
        "default":  {}
      "Controllers":
        - "fn": "AM2"
          "params": {"modelname": "default", "cfgsection": "power_trend", "uniquename": "'am2_power_hist_chassis_' + FQDD" }
      "View":
        - "fn": "with_URI"
          "params": "rooturi + '/Chassis/' + FQDD + '/Power/PowerTrends-1/Last'+trend"
        - "fn": "PublishResourceUpdatedEventsForModel"
          "params": "default"
      "Aggregate": "trend_histogram"

  "thermal":
      "Logger": ["module", "Thermal"]
      "Models":
        "default":  {"unique_name": "'Thermal'"}
      "Controllers":
        - "fn": "ARMapper"
          "params": {"modelname": "default", "cfgsection": "Chassis/System.Chassis/Thermal", "mappinguniquename": "'chassis_thermal_mapper:' + FQDD", "AddToView": "ar_mapper"}
        - "fn": "AM2"
          "params": {"modelname": "default", "cfgsection": "thermal", "uniquename": "'am2_thermal:' + FQDD", "passthru": {"fanuri": "rooturi + '/Chassis/' + FQDD + '/Sensors/Fans'"} }
      "View":
        - "fn": "with_URI"
          "params": "rooturi + '/Chassis/' + FQDD + '/Thermal'"
        - "fn": "withModel"
          "params": {"name": "global_health", "expr": "globalHealthModel"}
        - "fn": "PublishResourceUpdatedEventsForModel"
          "params": "default"
        - "fn": "stdFormatters"
          "params":
      "Aggregate": "thermal"

  "fan":
      "Logger": ["module", "Fan"]
      "Models":
        "default":  {"unique_name": "FQDD", "unique_name_attr": "FQDD+'.Attributes'", "attributes": "add_attribute_property()"}
      "Controllers":
        - "fn": "AM2"
          "params": {"modelname": "default", "cfgsection": "fan", "uniquename": "'am2_fan_' + FQDD + '/' + ChassisFQDD", "passthru": {"DM_FQDD": "ChassisFQDD + '#' + FQDD"}}
        - "fn": "ARMapper"
          "params": {"modelname": "default", "cfgsection": "firmware/inventory", "mappinguniquename": "'firmware_fan_mapper:' + ChassisFQDD + '/' + FQDD", "AddToView": "ar_mapper_inv"}
        - "fn": "ARMapper"
          "params": {"modelname": "default", "cfgsection": "Fans/Fan.Slot", "mappinguniquename": "'fan_mapper:' + ChassisFQDD + '/' + FQDD", "AddToView": "ar_mapper"}
        - "fn": "ARDumper"
          "params": {"modelname": "default", "AddToView": true, "passthru": {"fqddlist": "array(FQDD)"}}
      "View":
        - "fn": "with_URI"
          "params": "rooturi + '/Chassis/' + ChassisFQDD + '/Sensors/Fans/' + FQDD "
        - "fn": "linkModel"
          "params": {"existing": "default", "linkname": "swinv"}
        - "fn": "withModel"
          "params": {"name": "global_health", "expr": "globalHealthModel"}
        - "fn": "PublishResourceUpdatedEventsForModel"
          "params": "default"
        - "fn": "stdFormatters"
          "params":
      "Aggregate": "fan"
      "ExecPost": [
        "instantiate('attributes', 'parenturi', rooturi + '/Chassis/' + ChassisFQDD + '/Sensors/Fans/' + FQDD, 'FQDD', FQDD)",
        ]

  "iom":
      "Logger": ["module", "IOM"]
      "Models":
        "default":  {"unique_name": "FQDD", "managed_by": "array(rooturi + '/Managers/CMC.Integrated.1')"}
      "Controllers":
        - "fn": "ARMapper"
          "params": {"modelname": "default", "cfgsection": "firmware/inventory", "mappinguniquename": "'iom_fw_mapper:' + FQDD", "AddToView": "ar_mapper_inv"}
        - "fn": "ARMapper"
          "params": {"modelname": "default", "cfgsection": "Chassis/IOM.Slot", "mappinguniquename": "'iom_mapper:' + FQDD", "AddToView": "ar_mapper"}
        - "fn": "AM2"
          "params": {"modelname": "default", "cfgsection": "health", "uniquename": "'am2_health_' + FQDD", "passthru": {"health_fqdd": "'System.Chassis.1#' + FQDD"} }
        - "fn": "AM2"
          "params": {"modelname": "default", "cfgsection": "inst_power", "uniquename": "'am2_iom_' + FQDD", "passthru": {"DM_FQDD": "FQDD"}}
      "View":
        - "fn": "linkModel"
          "params": {"existing": "default", "linkname": "health"}
        - "fn": "with_URI"
          "params": "rooturi + '/Chassis/' + FQDD "
        - "fn": "linkModel"
          "params": {"existing": "default", "linkname": "swinv"}
        - "fn": "withModel"
          "params": {"name": "global_health", "expr": "globalHealthModel"}
        - "fn": "PublishResourceUpdatedEventsForModel"
          "params": "default"
        - "fn": "stdFormatters"
          "params":
        - "fn": "with_PumpHandledAction"
          "params": {"name": "iom.chassis.reset", "uri": "/Actions/Chassis.Reset", "timeout": 30}
        - "fn": "with_PumpHandledAction"
          "params": {"name": "iom.resetpeakpowerconsumption", "uri": "/Actions/Oem/DellChassis.ResetPeakPowerConsumption", "timeout": 30}
        - "fn": "with_PumpHandledAction"
          "params": {"name": "iom.virtualreseat", "uri": "/Actions/Oem/DellChassis.VirtualReseat", "timeout": 30}
      "Aggregate": "iom"
      "ExecPost": [
        "instantiate('attributes', 'parenturi', rooturi + '/Chassis/' + FQDD, 'FQDD', FQDD)",
        "instantiate('iom_config', 'FQDD', FQDD)",
        ]

  "iom_config":
      "Logger": ["module", "IOM_Config"]
      "Models":
        "default":  {"unique_name": "FQDD", "unique_name_attr": "FQDD+'.Attributes'", "attributes": "add_attribute_property()"}
      "Controllers":
        - "fn": "AM2"
          "params": {"modelname": "default", "cfgsection": "iom_config", "uniquename": "'am2_iom_config_' + FQDD" }
      "View":
        - "fn": "with_URI"
          "params": "rooturi + '/Chassis/' + FQDD + '/IOMConfiguration'"
        - "fn": "PublishResourceUpdatedEventsForModel"
          "params": "default"
        - "fn": "with_PumpHandledAction"
          "params": {"name": "IOMConfig_objects", "uri": "", "timeout": 30}
      "Aggregate": "iom_config"

  "subsyshealth":
      "Logger": ["module", "subsyshealth"]
      "Models":
        "default": {}
      "Controllers":
      "View":
        - "fn": "with_URI"
          "params": "rooturi + '/SubSystemHealth'"

  "slotcollection":
      "Logger": ["module", "slot"]
      "Models":
        "default": {"members": "array()"}
      "Controllers":
        - "fn": "AM2"
          "params": {"modelname": "default", "cfgsection": "collection", "uniquename": "'collection_' + view.GetURI()", "passthru": {'collection_uri': 'view.GetURI()'} }
      "View":
        - "fn": "with_URI"
          "params": "parenturi + '/Slots'"
        - "fn": "PublishResourceUpdatedEventsForModel"
          "params": "default"
        - "fn": "stdFormatters"
          "params":
      "Aggregate": "slotcollection"

  "slot":
      "Logger": ["module", "slot"]
      "Models":
        "default": {}
      "Controllers":
        - "fn": "AM2"
          "params": {"modelname": "default", "cfgsection": "slot", "uniquename": "'slot:' + FQDD", "passthru": {"FQDD": "FQDD", "ParentFQDD": "ParentFQDD"}}
      "View":
        - "fn": "with_URI"
          "params": " rooturi + '/Chassis/' + ParentFQDD + '/Slots/' + FQDD"
        - "fn": "PublishResourceUpdatedEventsForModel"
          "params": "default"
      "Aggregate": "slot"


  "slotconfigcollection":
      "Logger": ["module", "slotconfig"]
      "Models":
        "default": {"members": "array()"}
      "Controllers":
        - "fn": "AM2"
          "params": {"modelname": "default", "cfgsection": "collection", "uniquename": "'collection_' + view.GetURI()", "passthru": {'collection_uri': 'view.GetURI()'} }
      "View":
        - "fn": "with_URI"
          "params": "parenturi + '/SlotConfig'"
        - "fn": "PublishResourceUpdatedEventsForModel"
          "params": "default"
        - "fn": "stdFormatters"
          "params":
      "Aggregate": "slotconfigcollection"

  "slotconfig":
      "Logger": ["module", "slotconfig"]
      "Models":
        "default": {}
      "Controllers":
        - "fn": "AM2"
          "params": {"modelname": "default", "cfgsection": "slotconfig", "uniquename": "'slot:' + FQDD", "passthru": {"FQDD": "FQDD", "ParentFQDD": "ParentFQDD"}}
      "View":
        - "fn": "with_URI"
          "params": " rooturi + '/Chassis/' + ParentFQDD + '/SlotConfig/' + FQDD"
        - "fn": "PublishResourceUpdatedEventsForModel"
          "params": "default"
      "Aggregate": "slotconfig"

  "sled":
      "Logger": ["module", "Sled"]
      "Models":
        "default":  {"unique_name": "FQDD", "managed_by": "array(rooturi + '/Managers/CMC.Integrated.1')"}
      "Controllers":
        - "fn": "ARMapper"
          "params": {"modelname": "default", "cfgsection": "firmware/inventory", "mappinguniquename": "'sled_fw_mapper:' + FQDD", "AddToView": "ar_mapper_inv"}
        - "fn": "ARMapper"
          "params": {"modelname": "default", "cfgsection": "Chassis/System.Modular", "mappinguniquename": "'sled_mapper:' + FQDD", "AddToView": "ar_mapper"}
        - "fn": "AM2"
          "params": {"modelname": "default", "cfgsection": "health", "uniquename": "'am2_health_' + FQDD", "passthru": {"health_fqdd": "'System.Chassis.1#' + FQDD" } }
        - "fn": "AM2"
          "params": {"modelname": "default", "cfgsection": "inst_power", "uniquename": "'am2_sled_' + FQDD", "passthru": {"DM_FQDD": "'System.Chassis.1#' + FQDD + '#Power'"}}
      "View":
        - "fn": "linkModel"
          "params": {"existing": "default", "linkname": "health"}
        - "fn": "with_URI"
          "params": "rooturi + '/Chassis/' + FQDD "
        - "fn": "linkModel"
          "params": {"existing": "default", "linkname": "swinv"}
        - "fn": "PublishResourceUpdatedEventsForModel"
          "params": "default"
        - "fn": "stdFormatters"
          "params":
        - "fn": "with_PumpHandledAction"
          "params": {"name": "chassis.peripheralmapping", "uri": "/Actions/Oem/DellChassis.PeripheralMapping", "timeout": 30}
        - "fn": "with_PumpHandledAction"
          "params": {"name": "sledvirtualreseat", "uri": "/Actions/Chassis.VirtualReseat", "timeout": 30}
        - "fn": "with_PumpHandledAction"
          "params": {"name": "chassis.sledvirtualreseat", "uri": "/Actions/Oem/DellChassis.VirtualReseat", "timeout": 30}
      "Aggregate": "sled"
      "ExecPost": [
        "instantiate('attributes', 'parenturi', rooturi + '/Chassis/' + FQDD, 'FQDD', FQDD)"
        ]

awesome_mapper:
    ec_component_events:
      - { SelectEventType: "ComponentEvent",
          Select: "true",
          Exec: [
            "data.Type == 'ECIOM'      && addiom(data.FQDD)",
            "data.Type == 'ECSled'     && addec_system_modular(data.FQDD)",
            "data.Type == 'ECManager'  && addmanager_cmc_integrated(data.FQDD)",
            "data.Type == 'ECChassis'  && addchassis_cmc_integrated(data.FQDD)",
            "data.Type == 'Certificate'  && addcertificate(data.ParentFQDD + ':' + data.FQDD, data.ParentFQDD, data.FQDD)",
            "data.Type == 'SysChassis' && addsystem_chassis(data.FQDD)",
            "data.Type == 'ECFan'      && addecfan( data.ParentFQDD + ':' + data.FQDD, data.ParentFQDD, data.FQDD)",
            "data.Type == 'ECPSU'      && addecpsu( data.ParentFQDD + ':' + data.FQDD, data.ParentFQDD, data.FQDD)",
            "data.Type == 'Slot'       && addslot( data.ParentFQDD + ':' + data.FQDD, data.ParentFQDD, data.FQDD)",
            "data.Type == 'SlotConfig' && addslotconfig( data.ParentFQDD + ':' + data.FQDD, data.ParentFQDD, data.FQDD)",
                ]}

    collection:
      - { SelectEventType: "RedfishResource:created",
          Select: "nohash(data.ResourceURI) && baseuri(data.ResourceURI) == collection_uri ",
          ModelUpdate: [ {Property: "members", Query: "addtoset(model, propname, data.ResourceURI)"} ]}
      - { SelectEventType: "RedfishResource:removed",
          Select: "nohash(data.ResourceURI) && baseuri(data.ResourceURI) == collection_uri ",
          ModelUpdate: [ {Property: "members", Query: "removefromset(model, propname, data.ResourceURI)"} ]}

    power_supply_uris:
      - { SelectEventType: "RedfishResource:created",
          Select: "nohash(data.ResourceURI) && baseuri(data.ResourceURI) == rooturi + '/Chassis/' + FQDD + '/Power/PowerSupplies' ",
          ModelUpdate: [ {Property: "power_supply_uris", Query: "addtoset(model, propname, data.ResourceURI)"} ]}
      - { SelectEventType: "RedfishResource:removed",
          Select: "nohash(data.ResourceURI) && baseuri(data.ResourceURI) == rooturi + '/Chassis/' + FQDD + '/Power/PowerSupplies' ",
          ModelUpdate: [ {Property: "power_supply_uris", Query: "removefromset(model, propname, data.ResourceURI)"} ]}

    power_control_uris:
      - { SelectEventType: "RedfishResource:created",
          Select: "nohash(data.ResourceURI) && data.ResourceURI == rooturi + '/Chassis/' + FQDD + '/Power/PowerControl' ",
          ModelUpdate: [ {Property: "power_control_uris", Query: "addtoset(model, propname, data.ResourceURI)"} ]}
      - { SelectEventType: "RedfishResource:removed",
          Select: "nohash(data.ResourceURI) && data.ResourceURI == rooturi + '/Chassis/' + FQDD + '/Power/PowerControl' ",
          ModelUpdate: [ {Property: "power_control_uris", Query: "removefromset(model, propname, data.ResourceURI)"} ]}

    power_trends_uri:
      - { SelectEventType: "RedfishResource:created",
          Select: "nohash(data.ResourceURI) && data.ResourceURI == rooturi + '/Chassis/' + FQDD + '/Power/PowerTrends-1' ",
          ModelUpdate: [ {Property: "power_trends_uri", Query: "data.ResourceURI"} ]}
      - { SelectEventType: "RedfishResource:removed",
          Select: "nohash(data.ResourceURI) && data.ResourceURI == rooturi + '/Chassis/' + FQDD + '/Power/PowerTrends-1' ",
          ModelUpdate: [ {Property: "power_trends_uri", Query: "''"} ]}

    trend_histogram_uris:
      - { SelectEventType: "RedfishResource:created",
          Select: "nohash(data.ResourceURI) && baseuri(data.ResourceURI) == rooturi + '/Chassis/' + FQDD + '/Power/PowerTrends-1' ",
          ModelUpdate: [ {Property: "trend_histogram_uris", Query: "addtoset(model, propname, data.ResourceURI)"} ]}
      - { SelectEventType: "RedfishResource:removed",
          Select: "nohash(data.ResourceURI) && baseuri(data.ResourceURI) == rooturi + '/Chassis/' + FQDD + '/Power/PowerTrends-1' ",
          ModelUpdate: [ {Property: "trend_histogram_uris", Query: "removefromset(model, propname, data.ResourceURI)"} ]}

    thermal:
      - { SelectEventType: "RedfishResource:created",
          Select: "nohash(data.ResourceURI) && baseuri(data.ResourceURI) == fanuri",
          ModelUpdate: [ {Property: "fan_uris", Query: "addtoset(model, propname, data.ResourceURI)"} ]}
      - { SelectEventType: "RedfishResource:removed",
          Select: "nohash(data.ResourceURI) && baseuri(data.ResourceURI) == fanuri",
          ModelUpdate: [ {Property: "fan_uris", Query: "removefromset(model, propname, data.ResourceURI)"} ]}

    lclog:
      - { SelectEventType: "LogEvent",
          Select: "true",
          Exec: [ "addlclog(collection_uri, data)" ]}


    addsubsystemhealth:
      - { SelectEventType: "HealthEvent",
          Select: "true",
          Exec: [ "addsubsyshealth(data.FQDD, data.Health)" ]}

    testview:
      - { SelectEventType: "AttributeUpdated", Select: "data.FQDD == fqdd && data.Name == 'test'", ModelUpdate: [ {Property: "TEST", Query: "data.Value", Default: 0} ] }

    certificate:
      - { SelectEventType: "FileReadEvent", Select: "data.URI == 'CertificateInventory' && data.FQDD == FQDD", ModelUpdate: [ { Property: "certificate_signing_request", Query: "data.FileContent" } ] }
      - { SelectEventType: "FileReadEvent", Select: "data.URI == 'FactoryIdentity' && data.FQDD == FQDD", ModelUpdate: [ { Property: "certificate", Query: "data.Content" } ] }

    slot:
      - { SelectEventType: "AttributeUpdated", Select: "data.FQDD == 'System.Chassis.1' && data.Group == Group && data.Index == Index && data.Name == 'Config'",
            ModelUpdate: [ {Property: "slot_config", Query: "data.Value"}]}
      - { SelectEventType: "AttributeUpdated", Select: "data.FQDD == 'System.Chassis.1' && data.Group == Group && data.Index == Index && data.Name == 'Contains'",
            ModelUpdate: [ {Property: "slot_contains", Query: "data.Value"}]}
      - { SelectEventType: "AttributeUpdated", Select: "data.FQDD == 'System.Chassis.1' && data.Group == Group && data.Index == Index && data.Name == 'Name'",
            ModelUpdate: [ {Property: "slot_name", Query: "data.Value"}]}
      - { SelectEventType: "AttributeUpdated", Select: "data.FQDD == 'System.Chassis.1' && data.Group == Group && data.Index == Index && data.Name == 'Occupied'",
            ModelUpdate: [ {Property: "slot_occupied", Query: "data.Value"}]}
      - { SelectEventType: "AttributeUpdated", Select: "data.FQDD == 'System.Chassis.1' && data.Group == Group && data.Index == Index && data.Name == 'SlotName'",
            ModelUpdate: [ {Property: "slot_slotname", Query: "data.Value"}]}
      - { SelectEventType: "AttributeUpdated", Select: "(data.FQDD == model.GetPropertyOk(\"slot_contains\")) && data.Name == 'SledProfile'",
            ModelUpdate: [ {Property: "sled_profile", Query: "data.Value", Default: ""}]}

    slotconfig:
      - { SelectEventType: "AttributeUpdated", Select: "data.FQDD == 'System.Chassis.1' && data.Group == Group && data.Index == Index && data.Name == 'Rows'",
            ModelUpdate: [ {Property: "rows", Query: "string(data.Value)"}]}
      - { SelectEventType: "AttributeUpdated", Select: "data.FQDD == 'System.Chassis.1' && data.Group == Group && data.Index == Index && data.Name == 'Columns'",
            ModelUpdate: [ {Property: "columns", Query: "string(data.Value)"}]}
      - { SelectEventType: "AttributeUpdated", Select: "data.FQDD == 'System.Chassis.1' && data.Group == Group && data.Index == Index && data.Name == 'Location'",
            ModelUpdate: [ {Property: "location", Query: "data.Value"}]}
      - { SelectEventType: "AttributeUpdated", Select: "data.FQDD == 'System.Chassis.1' && data.Group == Group && data.Index == Index && data.Name == 'Name'",
            ModelUpdate: [ {Property: "name", Query: "data.Value"}]}
      - { SelectEventType: "AttributeUpdated", Select: "data.FQDD == 'System.Chassis.1' && data.Group == Group && data.Index == Index && data.Name == 'Order'",
            ModelUpdate: [ {Property: "order", Query: "data.Value"}]}
      - { SelectEventType: "AttributeUpdated", Select: "data.FQDD == 'System.Chassis.1' && data.Group == Group && data.Index == Index && data.Name == 'Orientation'",
            ModelUpdate: [ {Property: "orientation", Query: "data.Value"}]}
      - { SelectEventType: "AttributeUpdated", Select: "data.FQDD == 'System.Chassis.1' && data.Group == Group && data.Index == Index && data.Name == 'ParentConfig'",
            ModelUpdate: [ {Property: "parentConfig", Query: "data.Value"}]}
      - { SelectEventType: "AttributeUpdated", Select: "data.FQDD == 'System.Chassis.1' && data.Group == Group && data.Index == Index && data.Name == 'Type'",
            ModelUpdate: [ {Property: "type", Query: "data.Value"}]}

    fan:
      - { SelectEventType: "FanEvent", Select: "data.ObjectHeader.FQDD == DM_FQDD",
            ModelUpdate: [
                {Property: "fanpwm", Query: "data.Fanpwm" },
                {Property: "key", Query: "data.Key" },
                {Property: "fanname", Query: "data.FanName" },
                {Property: "Fanpwm_int", Query: "data.Fanpwm_int" },
                {Property: "VendorName", Query: "data.VendorName" },
                {Property: "WarningThreshold", Query: "data.WarningThreshold" },
                {Property: "DeviceName", Query: "data.DeviceName" },
                {Property: "TachName", Query: "data.TachName" },
                {Property: "CriticalThreshold", Query: "data.CriticalThreshold" },
                {Property: "Fanhealth", Query: "data.Fanhealth" },
                {Property: "Numrotors", Query: "data.Numrotors" },
                {Property: "Rotor2rpm", Query: "data.Rotor2rpm" },
                {Property: "Rotor1rpm", Query: "data.Rotor1rpm" },
                {Property: "rpm", Query: "(data.Rotor1rpm+data.Rotor2rpm)/2" },
                {Property: "FanStateMask", Query: "data.FanStateMask" }]}

    inst_power:
      - { SelectEventType: "InstPowerEvent", Select: "data.FQDD == DM_FQDD",
            ModelUpdate: [
                {Property: "Instantaneous_Power", Query: "data.InstPower"}]}

    iom_config:
      - { SelectEventType: "IomCapability", Select: "data.Name == FQDD",
            ModelUpdate: [
                {Property: "config", Query: "data.IOMConfig_objects" },
                {Property: "capabilities", Query: "data.Capabilities" },
                {Property: "managed", Query: "data.Internal_mgmt_supported" },
                {Property: "capCount", Query: "data.CapabilitiesCount" }]}


    power_control:
      - { SelectEventType: "PowerConsumptionDataObjEvent", Select: "true",
            ModelUpdate: [
                {Property: "energy_consumption_start_time", Query: "epoch_to_date(data.CwStartTime)" },
                {Property: "energy_consumption_kwh", Query: "int((data.CumulativeWatts)/1000)" },
                {Property: "headroom_watts", Query: "data.InstHeadRoom" },
                {Property: "max_peak_watts", Query: "data.PeakWatts" },
                {Property: "max_peak_watts_time", Query: "epoch_to_date(data.PwReadingTime)" },
                {Property: "min_peak_watts", Query: "data.MinWatts" },
                {Property: "min_peak_watts_time", Query: "epoch_to_date(data.MinwReadingTime)" },
                {Property: "peak_headroom_watts", Query: "data.PeakHeadRoom" },
                {Property: "consumed_watts", Query: "data.InstWattsPSU1_2" }]}
      # every chassis object is a power related item. add and remove them as they come
      - { SelectEventType: "RedfishResource:created",
          Select: "nohash(data.ResourceURI) && baseuri(data.ResourceURI) == rooturi + '/Chassis' ",
          ModelUpdate: [ {Property: "power_related_items", Query: "addtoset(model, propname, data.ResourceURI)"} ]}
      - { SelectEventType: "RedfishResource:removed",
          Select: "nohash(data.ResourceURI) && baseuri(data.ResourceURI) == rooturi + '/Chassis' ",
          ModelUpdate: [ {Property: "power_related_items", Query: "removefromset(model, propname, data.ResourceURI)"} ]}

    power_supply:
      - { SelectEventType: "PowerSupplyObjEvent", Select: "data.ObjectHeader.FQDD == DM_FQDD",
            ModelUpdate: [
                {Property: "line_input_voltage", Query: "zero_to_null(data.InputVolts)" }, #unsigned int
                {Property: "input_current", Query: "zero_to_null(data.InstAmps)" }, #float
                {Property: "obj_status", Query: "map_health_value(data.ObjectHeader.ObjStatus)" }]}

    power_trend:
      - { SelectEventType: "AvgPowerConsumptionStatDataObjEvent", Select: "true",
            ModelUpdate: [
                {Property: "average_watts",  Query: "traverse_struct(data, 'AvgPwrLast' + trend)" }, #does not work, trend is not a list?
                {Property: "max_watts",      Query: "traverse_struct(data, 'MaxPwrLast' + trend)" },
                {Property: "min_watts",      Query: "traverse_struct(data, 'MinPwrLast' + trend)" },
                {Property: "max_watts_time", Query: "epoch_to_date(traverse_struct(data, 'MaxPwrLast' + trend + 'Time'))" },
                {Property: "min_watts_time", Query: "epoch_to_date(traverse_struct(data, 'MinPwrLast' + trend + 'Time'))" }]}


    health:
      - { SelectEventType: "HealthEvent", Select: "data.FQDD == health_fqdd", ModelUpdate: [ {Property: "health", Query: "data.Health" } ] }

    global_health:
      - { SelectEventType: "HealthEvent", Select: "data.FQDD == 'System.Chassis.1#SubSystem.1#Fan'", ModelUpdate: [ {Property: "fan_rollup", Query: "data.Health" } ] }
      - { SelectEventType: "HealthEvent", Select: "data.FQDD == 'System.Chassis.1#SubSystem.1#Temperature'", ModelUpdate: [ {Property: "temperature_rollup", Query: "data.Health" } ] }
      - { SelectEventType: "HealthEvent", Select: "data.FQDD == 'System.Chassis.1#SubSystem.1#MM'", ModelUpdate: [ {Property: "mm_rollup", Query: "data.Health" } ] }
      - { SelectEventType: "HealthEvent", Select: "data.FQDD == 'System.Chassis.1#SubSystem.1#SledSystem'", modelupdate: [ {Property: "sled_rollup", Query: "data.Health" } ] }
      - { SelectEventType: "HealthEvent", Select: "data.FQDD == 'System.Chassis.1#SubSystem.1#PowerSupply'", ModelUpdate: [ {Property: "psu_rollup", Query: "data.Health" } ] }
      - { SelectEventType: "HealthEvent", Select: "data.FQDD == 'System.Chassis.1#SubSystem.1#CMC'", ModelUpdate: [ {Property: "cmc_rollup", Query: "data.Health" } ] }
      - { SelectEventType: "HealthEvent", Select: "data.FQDD == 'System.Chassis.1#SubSystem.1#Miscellaneous'", ModelUpdate: [ {Property: "misc_rollup", Query: "data.Health" } ] }
      - { SelectEventType: "HealthEvent", Select: "data.FQDD == 'System.Chassis.1#SubSystem.1#Battery'", ModelUpdate: [ {Property: "battery_rollup", Query: "data.Health" } ] }
      - { SelectEventType: "HealthEvent", Select: "data.FQDD == 'System.Chassis.1#SubSystem.1#IOMSubsystem'", ModelUpdate: [ {Property: "iom_rollup", Query: "data.Health" } ] }


mappings:
    Chassis/System.Modular:
        - {Property: "description",      FQDD: "{FQDD}", Group: "Info", Index: "1", Name: "Description" }
        - {Property: "service_tag",      FQDD: "{FQDD}", Group: "Info", Index: "1", Name: "ServiceTag" }
        - {Property: "power_state",      FQDD: "{FQDD}", Group: "Info", Index: "1", Name: "PowerState" }
        - {Property: "chassis_type",     FQDD: "{FQDD}", Group: "Info", Index: "1", Name: "ChassisType" }
        - {Property: "model",            FQDD: "{FQDD}", Group: "Info", Index: "1", Name: "Model" }
        - {Property: "manufacturer",     FQDD: "{FQDD}", Group: "Info", Index: "1", Name: "Manufacturer" }
        - {Property: "serial",           FQDD: "{FQDD}", Group: "Info", Index: "1", Name: "SerialNumber" }
        - {Property: "part_number",      FQDD: "{FQDD}", Group: "Info", Index: "1", Name: "PartNumber" }
        - {Property: "name",             FQDD: "{FQDD}", Group: "Info", Index: "1", Name: "Name" }
        - {Property: "sled_profile",     FQDD: "{FQDD}", Group: "Info", Index: "1", Name: "SledProfile" }
        - {Property: "sub_chassis_type", FQDD: "{FQDD}", Group: "Info", Index: "1", Name: "ChassisSubType" }

    firmware/inventory:
        - {Property: "fw_device_class",     FQDD: "{FQDD}", Group: "FWInventory", Index: "1", Name: "DeviceClass" }
        - {Property: "fw_description",      FQDD: "{FQDD}", Group: "FWInventory", Index: "1", Name: "Description"}
        - {Property: "fw_device_context",   FQDD: "{FQDD}", Group: "FWInventory", Index: "1", Name: "DeviceContext" }
        - {Property: "fw_device_instance",  FQDD: "{FQDD}", Group: "FWInventory", Index: "1", Name: "DeviceInstance" }
        - {Property: "fw_fqdd",             FQDD: "{FQDD}", Group: "FWInventory", Index: "1", Name: "FQDD" }
        - {Property: "fw_name",             FQDD: "{FQDD}", Group: "FWInventory", Index: "1", Name: "Name" }
        - {Property: "fw_install_date",     FQDD: "{FQDD}", Group: "FWInventory", Index: "1", Name: "InstallDate" }
        - {Property: "fw_updateable",       FQDD: "{FQDD}", Group: "FWInventory", Index: "1", Name: "Updateable" }
        - {Property: "fw_version",          FQDD: "{FQDD}", Group: "FWInventory", Index: "1", Name: "Version" }
        - {Property: "fw_version_sequence", FQDD: "{FQDD}", Group: "FWInventory", Index: "1", Name: "VersionSequence" }

    fpga_inventory:
        - {Property: "device_class",     FQDD: "{FQDD}", Group: "FWInventory", Index: "1", Name: "DeviceClass" }
        - {Property: "description",      FQDD: "{FQDD}", Group: "FWInventory", Index: "1", Name: "Description"}
        - {Property: "device_context",   FQDD: "{FQDD}", Group: "FWInventory", Index: "1", Name: "DeviceContext" }
        - {Property: "device_instance",  FQDD: "{FQDD}", Group: "FWInventory", Index: "1", Name: "DeviceInstance" }
        - {Property: "fqdd",             FQDD: "{FQDD}", Group: "FWInventory", Index: "1", Name: "FQDD" }
        - {Property: "name",             FQDD: "{FQDD}", Group: "FWInventory", Index: "1", Name: "Name" }
        - {Property: "label",            FQDD: "{FQDD}", Group: "FWInventory", Index: "1", Name: "Label" }
        - {Property: "install_date",     FQDD: "{FQDD}", Group: "FWInventory", Index: "1", Name: "InstallDate" }
        - {Property: "updateable",       FQDD: "{FQDD}", Group: "FWInventory", Index: "1", Name: "Updateable" }
        - {Property: "version",          FQDD: "{FQDD}", Group: "FWInventory", Index: "1", Name: "Version" }
        - {Property: "version_sequence", FQDD: "{FQDD}", Group: "FWInventory", Index: "1", Name: "VersionSequence" }

    # map AR entries to back end model
    PSU/PSU.Slot:
        - {Property: "capacity_watts",    FQDD: "{FQDD}", Group: "Info", Index: "1", Name: "Capacity" }
        - {Property: "component_id",    FQDD: "{FQDD}", Group: "Info", Index: "1", Name: "ComponentID" }
        - {Property: "eff_capacity",    FQDD: "{FQDD}", Group: "Info", Index: "1", Name: "EffCapacity" }
        - {Property: "firmware_version",    FQDD: "{FQDD}", Group: "Info", Index: "1", Name: "FirmwareVersion" }
        - {Property: "graphics_uri",    FQDD: "{FQDD}", Group: "Info", Index: "1", Name: "GraphicsURI" }
        - {Property: "hardware_version",    FQDD: "{FQDD}", Group: "Info", Index: "1", Name: "HardwareVersion" }
        - {Property: "input_voltage_type",    FQDD: "{FQDD}", Group: "Info", Index: "1", Name: "InputVoltageType" }
        - {Property: "name",    FQDD: "{FQDD}", Group: "Info", Index: "1", Name: "Name" }
        - {Property: "part_number",    FQDD: "{FQDD}", Group: "Info", Index: "1", Name: "PartNumber" }
        - {Property: "redundancy",    FQDD: "{FQDD}", Group: "Info", Index: "1", Name: "Redundancy" }
        - {Property: "serial_number",    FQDD: "{FQDD}", Group: "Info", Index: "1", Name: "SerialNumber" }
        - {Property: "state",    FQDD: "{FQDD}", Group: "Info", Index: "1", Name: "State" }
        - {Property: "state_str",    FQDD: "{FQDD}", Group: "Info", Index: "1", Name: "StateStr" }
        - {Property: "psOn",    FQDD: "{FQDD}", Group: "Info", Index: "1", Name: "psOn" }

    Managers/CMC.Integrated:
        - {Property: "firmware_version",        FQDD: "{FQDD}", Group: "FWInventory", Index: "1", Name: "Version" }
        - {Property: "name",                    FQDD: "{FQDD}", Group: "ChassisInfo", Index: "1", Name: "Name" }
        - {Property: "description",             FQDD: "{FQDD}", Group: "Info", Index: "1", Name: "Description" }
        - {Property: "health_state",            FQDD: "{FQDD}", Group: "Info", Index: "1", Name: "State" }
        - {Property: "asset_tag",               FQDD: "{FQDD}", Group: "Info", Index: "1", Name: "AssetTag" } #not listed in attributes.txt
        - {Property: "sku",                     FQDD: "{FQDD}", Group: "Info", Index: "1", Name: "SKU" } #not listed in attributes.txt
        - {Property: "serial",                  FQDD: "System.Chassis.1", Group: "Info", Index: "1", Name: "SerialNumber" }
        - {Property: "part_number",             FQDD: "System.Chassis.1", Group: "Info", Index: "1", Name: "PartNumber" }
        - {Property: "chassis_type",            FQDD: "{FQDD}", Group: "Info", Index: "1", Name: "ChassisType" }
        - {Property: "model",                   FQDD: "{FQDD}", Group: "Info", Index: "1", Name: "Model" }
        - {Property: "manufacturer",            FQDD: "{FQDD}", Group: "Info", Index: "1", Name: "Manufacturer" }
        - {Property: "description",             FQDD: "{FQDD}", Group: "Info", Index: "1", Name: "Description" }
        - {Property: "indicator_led",           FQDD: "System.Chassis.1", Group: "Info", Index: "1", Name: "IndicatorLED" }
        - {Property: "redundancy_mode",         FQDD: "{FQDD}", Group: "Redundancy", Index: "1", Name: "Mode" }
        - {Property: "redundancy_health_state", FQDD: "{FQDD}", Group: "Redundancy", Index: "1", Name: "State" }
        - {Property: "redundancy_min",          FQDD: "{FQDD}", Group: "Redundancy", Index: "1", Name: "MinNumNeeded" }
        - {Property: "redundancy_max",          FQDD: "{FQDD}", Group: "Redundancy", Index: "1", Name: "MaxNumSupported" }

    Chassis/IOM.Slot:
        - {Property: "asset_tag",    FQDD: "{FQDD}", Group: "Info", Index: "1", Name: "AssetTag" }
        - {Property: "description",  FQDD: "{FQDD}", Group: "Info", Index: "1", Name: "Description" }
        - {Property: "power_state",  FQDD: "{FQDD}", Group: "Info", Index: "1", Name: "PowerState" }
        - {Property: "serial",       FQDD: "{FQDD}", Group: "Info", Index: "1", Name: "SerialNumber" }
        - {Property: "part_number",  FQDD: "{FQDD}", Group: "Info", Index: "1", Name: "PartNumber" }
        - {Property: "chassis_type", FQDD: "{FQDD}", Group: "Info", Index: "1", Name: "ChassisType" }
        - {Property: "model",        FQDD: "{FQDD}", Group: "Info", Index: "1", Name: "Model" }
        - {Property: "name",         FQDD: "{FQDD}", Group: "Info", Index: "1", Name: "Name" }
        - {Property: "manufacturer", FQDD: "{FQDD}", Group: "Info", Index: "1", Name: "Manufacturer" }
        - {Property: "service_tag",  FQDD: "{FQDD}", Group: "Info", Index: "1", Name: "ServiceTag" }
        - {Property: "indicator_led", FQDD: "{FQDD}", Group: "Info", Index: "1", Name: "IndicatorLED"}

    Chassis/System.Chassis:
        - {Property: "asset_tag",    FQDD: "{FQDD}", Group: "Info", Index: "1", Name: "AssetTag" }
        - {Property: "description",  FQDD: "{FQDD}", Group: "Info", Index: "1", Name: "Description" }
        - {Property: "power_state",  FQDD: "{FQDD}", Group: "ChassisPower", Index: "1", Name: "ChassisPowerStatus.1" }
        - {Property: "serial",       FQDD: "{FQDD}", Group: "Info", Index: "1", Name: "SerialNumber" }
        - {Property: "part_number",  FQDD: "{FQDD}", Group: "Info", Index: "1", Name: "PartNumber" }
        - {Property: "chassis_type", FQDD: "{FQDD}", Group: "Info", Index: "1", Name: "ChassisType"}
        - {Property: "model",        FQDD: "{FQDD}", Group: "Info", Index: "1", Name: "Model" }
        - {Property: "name",         FQDD: "{FQDD}", Group: "Info", Index: "1", Name: "Name" }
        - {Property: "manufacturer", FQDD: "{FQDD}", Group: "Info", Index: "1", Name: "Manufacturer" }
        - {Property: "service_tag",  FQDD: "{FQDD}", Group: "Info", Index: "1", Name: "ServiceTag" }
        - {Property: "indicator_led", FQDD: "{FQDD}", Group: "Info", Index: "1", Name: "IndicatorLED"}

    Chassis/System.Chassis/Power:
        - {Property: "capacity_watts", FQDD: "System.Chassis.1", Group: "ChassisPower", Index: "1", Name: "SystemInputMaxPowerCapacity" }
        - {Property: "limit_in_watts", FQDD: "System.Chassis.1", Group: "ChassisPower", Index: "1", Name: "PowerCapValue" }

    Chassis/System.Chassis/Thermal:
        # no mappings for now: placeholder

    PowerSupply/PSU.Slot:
        # no mappings for now: placeholder

    Fans/Fan.Slot:
        - {Property: "health",    FQDD: "{FQDD}", Group: "Info", Index: "1", Name: "FanHealth" }
        - {Property: "firmware_version",    FQDD: "{FQDD}", Group: "Info", Index: "1", Name: "FirmwareVersion" }
        - {Property: "hardware_version",    FQDD: "{FQDD}", Group: "Info", Index: "1", Name: "HardwareVersion" }
        - {Property: "graphics_uri",    FQDD: "{FQDD}", Group: "Info", Index: "1", Name: "GraphicsURI" }
        - {Property: "name",    FQDD: "{FQDD}", Group: "Info", Index: "1", Name: "FanName" }

    UpdateService:
        # no mappings for now: placeholder
