main:
    server_name: "dell_idrac"
    #options: "openbmc" | "dell_ec" | "mockup"

listen:
    - http::8080
    - https::8443
    - pprof::9080

session:
    timeout: 600

views:
  "rootview":
      "Logger": ["module", "root"]
      "Controllers":
        # This is for dynamic runtime instantiation of new chassis as they appear
        - "fn": "AM2"
          "params": {"modelname": "default", "cfgsection": "idrac_component_events", "uniquename": "'idrac_system_chassis_' + view.GetURI()"}
      "View":
        - "fn": "with_URI"
          "params": "'/redfish/v1'"
      "Aggregate": "root"
      "ExecPost": [
        "set_hash_value(serviceglobals, 'rootid', uuid)",
        "set_hash_value(serviceglobals, 'rooturi', view.GetURI())",
        "instantiate('testview')",
        "instantiate('chassis')",
        "instantiate('systems')",
        "instantiate('managers')",
        "instantiate('accountservice')",
        "instantiate('roles')",
        "instantiate('accounts')",
        "instantiate('registries')",
        # we will eventually enable sessionservice, but need to do some work in ec.go to enable it first
        #"instantiate('sessionservice')",
      ]

  "testview":
      "Logger": ["module", "testview"]
      "Models":
        "default":  {"unique_name": "'TEST_Unique_Name'", "name": "'TEST_Name'", "'description'": "'TEST_Description'" }
      "Controllers":
      "View":
        - "fn": "with_URI"
          "params": "rooturi + '/testview'"
        - "fn": "PublishResourceUpdatedEventsForModel"
          "params": "default"
      "Aggregate": "testview"

  "chassis":
      "Logger": ["module", "Chassis"]
      "Models":
        "default":  {"members": "array()"}
      "Controllers":
        - "fn": "AM2"
          "params": {"modelname": "default", "cfgsection": "collection", "uniquename": "'collection_' + view.GetURI()", "passthru": {'collection_uri': 'view.GetURI()'} }

      "View":
        - "fn": "with_URI"
          "params": "rooturi + '/Chassis'"
        - "fn": "PublishResourceUpdatedEventsForModel"
          "params": "default"
        - "fn": "stdFormatters"
          "params":
      "Aggregate": "chassis"

  "systems":
      "Logger": ["module", "Systems"]
      "Models":
        "default":  {"members": "array()"}
      "Controllers":
        - "fn": "AM2"
          "params": {"modelname": "default", "cfgsection": "collection", "uniquename": "'collection_' + view.GetURI()", "passthru": {'collection_uri': 'view.GetURI()'} }
      "View":
        - "fn": "with_URI"
          "params": "rooturi + '/Systems'"
        - "fn": "PublishResourceUpdatedEventsForModel"
          "params": "default"
        - "fn": "stdFormatters"
          "params":
      "Aggregate": "systems"

  "managers":
      "Logger": ["module", "Managers"]
      "Models":
        "default":  {"members": "array()"}
      "Controllers":
        - "fn": "AM2"
          "params": {"modelname": "default", "cfgsection": "collection", "uniquename": "'collection_' + view.GetURI()", "passthru": {'collection_uri': 'view.GetURI()'} }
      "View":
        - "fn": "with_URI"
          "params": "rooturi + '/Managers'"
        - "fn": "PublishResourceUpdatedEventsForModel"
          "params": "default"
        - "fn": "stdFormatters"
          "params":
      "Aggregate": "managers"

  "accountservice":
      "Logger": ["module", "AccountService"]
      "Models":
        "default":  {}
      "Controllers":
      "View":
        - "fn": "with_URI"
          "params": "rooturi + '/AccountService' "
        - "fn": "PublishResourceUpdatedEventsForModel"
          "params": "default"
        - "fn": "stdFormatters"
          "params":
      "Aggregate": "accountservice"
      "ExecPost": [
        "set_hash_value(serviceglobals, 'actsvc_id', uuid)",
        "set_hash_value(serviceglobals, 'actsvc_uri', view.GetURI())"]

  "roles":
      "Logger": ["module", "Roles"]
      "Models":
        "default":  {"members": "array()"}
      "Controllers":
        - "fn": "AM2"
          "params": {"modelname": "default", "cfgsection": "collection", "uniquename": "'collection_' + view.GetURI()", "passthru": {'collection_uri': 'view.GetURI()'} }
      "View":
        - "fn": "with_URI"
          "params": "rooturi + '/AccountService/Roles'"
        - "fn": "PublishResourceUpdatedEventsForModel"
          "params": "default"
        - "fn": "stdFormatters"
          "params":
      "Aggregate": "roles"

  "accounts":
      "Logger": ["module", "Accounts"]
      "Models":
        "default":  {"members": "array()"}
      "Controllers":
        - "fn": "AM2"
          "params": {"modelname": "default", "cfgsection": "collection", "uniquename": "'collection_' + view.GetURI()", "passthru": {'collection_uri': 'view.GetURI()'} }
      "View":
        - "fn": "with_URI"
          "params": "rooturi + '/AccountService/Accounts'"
        - "fn": "PublishResourceUpdatedEventsForModel"
          "params": "default"
        - "fn": "stdFormatters"
          "params":
      "Aggregate": "accounts"

  "eventservice":
      "Logger": ["module", "eventservice"]
      "Models":
        "default": {
           "max_milliseconds_to_queue": "500",
           "max_events_to_queue": "20",
           "delivery_retry_attempts": "3",
           "delivery_retry_interval_seconds": "60",
           }
      "Controllers":
      "View":
        - "fn": "with_URI"
          "params": "rooturi + '/EventService'"
        - "fn": "PublishResourceUpdatedEventsForModel"
          "params": "default"
        - "fn": "etag"
          "params": ["max_milliseconds_to_queue", "max_events_to_queue", "delivery_retry_attempts", "delivery_retry_interval_seconds"]
        - "fn": "WithAction"
          "params": {"name": "submit.test.event", "uri": "/Actions/EventService.SubmitTestEvent", "actionFunction": "submittestevent"}
        - "fn": "linkModel"
          "params": {"existing": "default", "linkname": "etag"}
      "Aggregate": "eventservice"

  "subscriptioncollection":
      "Logger": ["module", "eventservice"]
      "Models":
        "default": {"members": "array()"}
      "Controllers":
        - "fn": "AM2"
          "params": {"modelname": "default", "cfgsection": "collection", "uniquename": "'collection_' + view.GetURI()", "passthru": {'collection_uri': 'view.GetURI()'} }
      "View":
        - "fn": "with_URI"
          "params": "eventsvc_uri + '/Subscriptions'"
        - "fn": "PublishResourceUpdatedEventsForModel"
          "params": "default"
        - "fn": "stdFormatters"
          "params":
      "Aggregate": "subscriptioncollection"

  "subscription":
      "Logger": ["module", "eventservice"]
      "Models":
        "default": {
          "destination": "destination",
          "protocol":    "protocol",
          "context":     "context",
          "event_types": "eventTypes",
        }
      "Controllers":
      "View":
        - "fn": "with_URI"
          "params": "eventsvc_uri + '/Subscriptions/' + uuid"
        - "fn": "PublishResourceUpdatedEventsForModel"
          "params": "default"
      "Aggregate": "subscription"

  "sessionservice":
      "Logger": ["module", "session"]
      "Models":
        "default":  {"session_timeout": "30"}
      "Controllers":
#        - "fn": "ARMapper"
#          "params": {"modelname": "default", "cfgsection": "SessionService", "mappinguniquename": "rooturi + '/SessionService'", "AddToView": "ar_mapper"}
      "View":
        - "fn": "with_URI"
          "params": "rooturi + '/SessionService'"
        - "fn": "PublishResourceUpdatedEventsForModel"
          "params": "default"
        - "fn": "stdFormatters"
          "params":
      "Aggregate": "sessionservice"
      "ExecPost": [
        "set_hash_value(serviceglobals, 'sessionsvc_id', uuid)",
        "set_hash_value(serviceglobals, 'sessionsvc_uri', view.GetURI())",
      ]

  "sessioncollection":
      "Logger": ["module", "session"]
      "Models":
        "default":  {"members": "array()"}
      "Controllers":
        - "fn": "AM2"
          "params": {"modelname": "default", "cfgsection": "collection", "uniquename": "'collection_' + view.GetURI()", "passthru": {'collection_uri': 'view.GetURI()'} }
      "View":
        - "fn": "with_URI"
          "params": "rooturi + '/SessionService/Sessions'"
        - "fn": "PublishResourceUpdatedEventsForModel"
          "params": "default"
        - "fn": "stdFormatters"
          "params":
      "Aggregate": "sessioncollection"

  "session":
      "Logger": ["module", "session"]
      "Models":
      "Controllers":
      "View":
        - "fn": "with_URI"
          "params": "rooturi + '/SessionService/Sessions/' + uuid"
      "Aggregate": "session"

  "registries":
      "Logger": ["module", "registry"]
      "Models":
        "default":  {"members": "array()"}
      "Controllers":
        - "fn": "AM2"
          "params": {"modelname": "default", "cfgsection": "collection", "uniquename": "'collection_' + view.GetURI()", "passthru": {'collection_uri': 'view.GetURI()'} }
      "View":
        - "fn": "with_URI"
          "params": "rooturi + '/Registries'"
        - "fn": "stdFormatters"
          "params":
      "Aggregate": "registry_collection"

  "idrac_registry":
      "Logger": ["module", "registry"]
      "Models":
        "default":  {
          "id":          "'Messages'",
          "description": "'iDRAC Message Registry File locations'",
          "name":        "'iDRAC Message Registry File'",
          "type":        "'iDrac.1.5'",
          "languages":   "array('En')",
        }
      "Controllers":
      "View":
        - "fn": "with_URI"
          "params": "rooturi + '/Registries/Messages'"
        - "fn": "stdFormatters"
          "params":

  "base_registry":
      "Logger": ["module", "registry"]
      "Models":
        "default":  {
          "id":          "'BaseMessages'",
          "description": "'Base Message Registry File locations'",
          "name":        "'Base Message Registry File'",
          "type":        "'Base.1.3.8'",
          "languages":   "array('En')",
        }
      "Controllers":
      "View":
        - "fn": "with_URI"
          "params": "rooturi + '/Registries/BaseMessages'"
        - "fn": "withFormatter_count"
          "params":

  "mgr_attr_registry":
      "Logger": ["module", "registry"]
      "Models":
        "default":  {
          "id":          "'ManagerAttributeRegistry'",
          "description": "'Manager Attribute Registry File Locations'",
          "name":        "'Manager Attribute Registry File'",
          "type":        "'ManagerAttributeRegistry.1.0'",
          "languages":   "array('En')",
        }
      "Controllers":
      "View":
        - "fn": "with_URI"
          "params": "rooturi + '/Registries/ManagerAttributeRegistry'"
        - "fn": "stdFormatters"
          "params":

  "attributes":
      "Logger": ["module", "attributes"]
      "Models":
        "default":  {"unique_name": "FQDD", "unique_name_attr": "FQDD+'.Attributes'", "attributes": "add_attribute_property()"}
      "Controllers":
        - "fn": "ARDumper"
          "params": {"modelname": "default", "AddToView": true, "passthru": {"fqddlist": "array(FQDD)"}}
      "View":
        - "fn": "with_URI"
          "params": "parenturi + '/Attributes'"
        - "fn": "stdFormatters"
          "params":
      "Aggregate": "attributes_uri"


  "idrac_embedded":
      "Logger": ["module", "idrac_embedded"]
      "Models":
        "default":  {}
      "Controllers":
      "View":
        - "fn": "with_URI"
          "params": "rooturi + '/Managers/' + FQDD"
        - "fn": "PublishResourceUpdatedEventsForModel"
          "params": "default"
        - "fn": "stdFormatters"
          "params":
      "Aggregate": "idrac_embedded"
      "ExecPost": [
        "instantiate('attributes', 'parenturi', rooturi + '/Managers/' + FQDD, 'FQDD', FQDD)"
       ]

  "system_chassis":
      "Logger": ["module", "system_chassis"]
      "Models":
        "default":  {}
      "Controllers":
        - "fn": "ARDumper"
          "params": {"modelname": "default", "AddToView": true, "passthru": {"fqddlist": "array(FQDD)"}}
      "View":
        - "fn": "with_URI"
          "params": "rooturi + '/Chassis/' + FQDD "
        - "fn": "PublishResourceUpdatedEventsForModel"
          "params": "default"
        - "fn": "with_PumpHandledAction"
          "params": {"name": "chassis.reset", "uri": "/Actions/Chassis.Reset", "timeout": 30}
        - "fn": "stdFormatters"
          "params":
      "Aggregate": "idrac_system_chassis"

  "idrac_system_embedded":
      "Logger": ["module", "system_embedded"]
      "Models":
        "default":  {}
      "Controllers":
      "View":
        - "fn": "with_URI"
          "params": "rooturi + '/Systems/' + FQDD "
        - "fn": "PublishResourceUpdatedEventsForModel"
          "params": "default"
        - "fn": "stdFormatters"
          "params":
      "Aggregate": "idrac_system_embedded"
      "ExecPost": [
        "instantiate('attributes', 'parenturi', rooturi + '/Systems/' + FQDD, 'FQDD', FQDD)",
        "instantiate('storage_collection', 'parenturi', rooturi + '/Systems/' + FQDD, 'FQDD', FQDD)",
       ]

  "storage_collection":
      "Logger": ["module", "StorageCollection"]
      "Models":
        "default":  {}
      "Controllers":
        - "fn": "AM2"
          "params": {"modelname": "default", "cfgsection": "collection", "uniquename": "'collection_' + view.GetURI()", "passthru": {'collection_uri': 'view.GetURI()'} }
      "View":
        - "fn": "with_URI"
          "params": "parenturi + '/Storage'"
        - "fn": "PublishResourceUpdatedEventsForModel"
          "params": "default"
        - "fn": "stdFormatters"
          "params":
      "Aggregate": "idrac_storage_collection"

  "idrac_storage_instance":
      "Logger": ["module", "StorageInstance"]
      "Models":
        "default":  {}
      "Controllers":
        - "fn": "AM2"
          "params": {"modelname": "default", "cfgsection": "idrac_storage_adapter_map", "uniquename": "'am2_idrac_storage_instance_map_' + FQDD", "passthru": {"ParentFQDD": "ParentFQDD", "FQDD": "FQDD"}}
        - "fn": "AM2"
          "params": {"modelname": "default", "cfgsection": "idrac_storage_drive_uris", "uniquename": "'am2_storage_instance_drive_uris:' + ParentFQDD + ':' + FQDD", "passthru": {"ParentFQDD": "ParentFQDD", "FQDD": "FQDD"}}
        - "fn": "AM2"
          "params": {"modelname": "default", "cfgsection": "idrac_storage_controller_uris", "uniquename": "'am2_storage_instance_controller_uris:' + ParentFQDD + ':' + FQDD", "passthru": {"ParentFQDD": "ParentFQDD", "FQDD": "FQDD"}}
      "View":
        - "fn": "with_URI"
          "params": "rooturi + '/Systems/' + ParentFQDD + '/Storage/' + FQDD "
        - "fn": "PublishResourceUpdatedEventsForModel"
          "params": "default"
        - "fn": "stdFormatters"
          "params":
      "Aggregate": "idrac_storage_instance"
      "ExecPost": [
        "instantiate('idrac_storage_volume_collection', 'parenturi', rooturi + '/Systems/' + ParentFQDD + '/Storage/' + FQDD , 'FQDD', FQDD, 'ParentFQDD', ParentFQDD)",
        ]

  "idrac_storage_drive":
      "Logger": ["module", "StorageDrive"]
      "Models":
        "default":  {}
      "Controllers":
        - "fn": "AM2"
          "params": {"modelname": "default", "cfgsection": "idrac_storage_drive_map", "uniquename": "'am2_idrac_storage_drive_map_' + FQDD", "passthru": {"ParentFQDD": "ParentFQDD", "FQDD": "FQDD"}}
      "View":
        - "fn": "with_URI"
          "params": "rooturi + '/Systems/' + ParentFQDD + '/Storage/Drives/' + FQDD "
        - "fn": "PublishResourceUpdatedEventsForModel"
          "params": "default"
        - "fn": "stdFormatters"
          "params":
      "Aggregate": "idrac_storage_drive"

  "idrac_storage_enclosure":
      "Logger": ["module", "StorageEnclosure"]
      "Models":
        "default":  {}
      "Controllers":
        - "fn": "AM2"
          "params": {"modelname": "default", "cfgsection": "idrac_storage_enclosure_map", "uniquename": "'am2_idrac_storage_enclosure_map_' + FQDD"}
      "View":
        - "fn": "with_URI"
          "params": "rooturi + '/Chassis/' + URI_FQDD "
        - "fn": "PublishResourceUpdatedEventsForModel"
          "params": "default"
        - "fn": "stdFormatters"
          "params":
      "Aggregate": "idrac_storage_enclosure"

  "idrac_storage_controller":
      "Logger": ["module", "StorageController"]
      "Models":
        "default":  {}
      "Controllers":
        - "fn": "AM2"
          "params": {"modelname": "default", "cfgsection": "idrac_storage_adapter_map", "uniquename": "'am2_idrac_storage_controller_map_' + FQDD", "passthru": {"ParentFQDD": "ParentFQDD", "FQDD": "FQDD"}}
      "View":
        - "fn": "with_URI"
          "params": "rooturi + '/Systems/' + ParentFQDD + '/StorageControllers/' + FQDD "
        - "fn": "PublishResourceUpdatedEventsForModel"
          "params": "default"
        - "fn": "stdFormatters"
          "params":
      "Aggregate": "idrac_storage_controller"

  "idrac_storage_volume_collection":
      "Logger": ["module", "StorageVolumeCollection"]
      "Models":
        "default":  {}
      "Controllers":
        - "fn": "AM2"
          "params": {"modelname": "default", "cfgsection": "volume_collection", "uniquename": "'collection_' + view.GetURI()", "passthru": {'collection_uri': "rooturi + '/Systems/' + ParentFQDD + '/Storage/Volumes'", 'ParentFQDD': 'ParentFQDD', 'FQDD': 'FQDD'} }
      "View":
        - "fn": "with_URI"
          "params": "parenturi + '/Volumes'"
        - "fn": "PublishResourceUpdatedEventsForModel"
          "params": "default"
        - "fn": "stdFormatters"
          "params":
      "Aggregate": "idrac_storage_volume_collection"

  "idrac_storage_volume":
      "Logger": ["module", "StorageVolume"]
      "Models":
        "default":  {}
      "Controllers":
        - "fn": "AM2"
          "params": {"modelname": "default", "cfgsection": "idrac_storage_volume_map", "uniquename": "'am2_idrac_storage_volume_map_' + FQDD", "passthru": {"ParentFQDD": "ParentFQDD", "FQDD": "FQDD"}}
      "View":
        - "fn": "with_URI"
          "params": "rooturi + '/Systems/' + ParentFQDD + '/Storage/Volumes/' + FQDD"
        - "fn": "PublishResourceUpdatedEventsForModel"
          "params": "default"
        - "fn": "stdFormatters"
          "params":
      "Aggregate": "idrac_storage_volume"


# <<==================================================================>>
# # everything above this point is basically correctly implemented and
# dynamically instantiated on demand based on component events

awesome_mapper:
    collection:
      - { SelectEventType: "RedfishResource:created",
          Select: "type == 'RedfishResource:created' && nohash(data.ResourceURI) && baseuri(data.ResourceURI) == collection_uri ",
          ModelUpdate: [ {Property: "members", Query: "addtoset(model, propname, data.ResourceURI)", Default: 0} ]}
      - { SelectEventType: "RedfishResource:removed",
          Select: "type == 'RedfishResource:removed' && nohash(data.ResourceURI) && baseuri(data.ResourceURI) == collection_uri ",
          ModelUpdate: [ {Property: "members", Query: "removefromset(model, propname, data.ResourceURI)", Default: 0} ]}

    testview:
        - { Select: "type == 'AttributeUpdated' && data.FQDD == fqdd && data.Name == 'InstantaneousPower'", ModelUpdate: [ {Property: "Instantaneous_Power", Query: "data.Value", Default: 0} ] }

    idrac_component_events:
      - { SelectEventType: "IDRACComponentEvent",
          Select: "true",
          Exec: [
                "data.Type == 'iDRAC' && addidrac_embedded(data.FQDD)",
                "data.Type == 'System' && addsystem_embedded(data.FQDD)",
                "data.Type == 'Chassis' && addsystem_chassis(data.FQDD)",
                "data.Type == 'StorageInstance' && addidrac_storage_instance(data.ParentFQDD + ':' + data.FQDD, data.ParentFQDD, data.FQDD)",
                "data.Type == 'StorageController' && addidrac_storage_controller(data.ParentFQDD + ':' + data.FQDD, data.ParentFQDD, data.FQDD)",
                "data.Type == 'StorageDrive' && addidrac_storage_drive(data.ParentFQDD + ':' + data.FQDD, data.ParentFQDD, data.FQDD)",
                "data.Type == 'StorageEnclosure' && addidrac_storage_enclosure(data.FQDD)",
                "data.Type == 'StorageVolume' && addidrac_storage_volume(data.ParentFQDD + ':' + data.FQDD, data.ParentFQDD, data.FQDD)",
                ]}

    idrac_storage_drive_uris:
      - { SelectEventType: "RedfishResource:created",
          Select: "nohash(data.ResourceURI) && baseuri(data.ResourceURI) == rooturi + '/Systems/' + ParentFQDD + '/Storage/Drives'",
          ModelUpdate: [ {Property: "drive_uris", Query: "addtoset(model, propname, data.ResourceURI)"} ]}
      - { SelectEventType: "RedfishResource:removed",
          Select: "nohash(data.ResourceURI) && baseuri(data.ResourceURI) == rooturi + '/Systems/' + ParentFQDD + '/Storage/Drives'",
          ModelUpdate: [ {Property: "drive_uris", Query: "removefromset(model, propname, data.ResourceURI)"} ]}

    idrac_storage_controller_uris:
      - { SelectEventType: "RedfishResource:created",
          Select: "nohash(data.ResourceURI) && baseuri(data.ResourceURI) == rooturi + '/Systems/' + ParentFQDD + '/StorageControllers'",
          ModelUpdate: [ {Property: "storage_controller_uris", Query: "addtoset(model, propname, data.ResourceURI)"} ]}
      - { SelectEventType: "RedfishResource:removed",
          Select: "nohash(data.ResourceURI) && baseuri(data.ResourceURI) == rooturi + '/Systems/' + ParentFQDD + '/StorageControllers'",
          ModelUpdate: [ {Property: "storage_controller_uris", Query: "removefromset(model, propname, data.ResourceURI)"} ]}

    # have to do this one differently because enclosures are just a "Chassis"
    # object and are hard to distinguish from every other chassis
    idrac_storage_enclosure_uris:
      - { SelectEventType: "IDRACComponentEvent",
          Select: "data.Type == 'StorageEnclosure'",
          ModelUpdate: [ {Property: "enclosure_uris", Query: "addtoset(model, propname, rooturi + '/Chassis/' + data.FQDD)"} ]}
      # TODO: need to add a mapper to delete


    volume_collection:
        # the uri's for volumes are ambiguous, so we have to do extra tests.
        # have to test that resourceuri ENDS WITH the "FQDD" value (correspoding with the mapped storage controller)
      - { SelectEventType: "RedfishResource:created",
          Select: "nohash(data.ResourceURI) && baseuri(data.ResourceURI) == collection_uri && hassuffix(data.ResourceURI, ':' + FQDD)",
          ModelUpdate: [ {Property: "members", Query: "addtoset(model, propname, data.ResourceURI)", Default: 0} ] }
      - { SelectEventType: "RedfishResource:removed",
          Select: "nohash(data.ResourceURI) && baseuri(data.ResourceURI) == collection_uri && hassuffix(data.ResourceURI, ':' + FQDD)",
          ModelUpdate: [ {Property: "members", Query: "removefromset(model, propname, data.ResourceURI)", Default: 0} ]}


    idrac_storage_drive_map:
        # idrac assumes all storage is attached to system.embedded.1, so there is no ParentFQDD check here.
      - { SelectEventType: "StoragePhysicalEvent", Select: "data.ObjectHeader.FQDD == EVENT_FQDD",
            ModelUpdate: [
                {Property: "block_size_bytes", Query: "data.BlockSize" },
                {Property: "capable_speed", Query: "data.CapableSpeeds" },
                {Property: "description", Query: "data.RaidObjHeader.ObjName" },
                {Property: "capacity", Query: "data.Capacity" },
                {Property: "encryption_ability", Query: "encryptn_ability(data.EncryptionAbility)" },
                {Property: "encryption_status", Query: "encryptn_status(data.EncryptionStatus)" },
                {Property: "failure_predicted", Query: "fail_predicted(data.FailurePredicted, data.RaidObjHeader.ObjAttributes)" },
                {Property: "hotspare_type", Query: "hotspare(data.Hotspare)" },
                {Property: "unique_name", Query: "data.Id" },
                {Property: "manufacturer", Query: "data.Manufacturer" },
                {Property: "media_type", Query: "data.MediaType" },
                {Property: "model", Query: "data.ObjectHeader.FQDD" },
                {Property: "name", Query: "data.RaidObjHeader.ObjName" },
                {Property: "negotiated_speed", Query: "data.NegotiatedSpeed" },
                {Property: "part_number", Query: "data.PartNumber" },
                {Property: "predicted_media_life_left_percent", Query: "data.PredictedMediaLife" },
                {Property: "protocol", Query: "data.Protocol" },
                {Property: "revision", Query: "data.Revision" },
                {Property: "rotation_speed", Query: "data.NominalMediumRotationRate" },
                {Property: "serial_number", Query: "data.Serial" },
                {Property: "drive_formfactor", Query: "data.DriveFormFactor" },
                {Property: "connector", Query: "data.Connector" },
                {Property: "free_size", Query: "data.FreeSize" },
                {Property: "manufacturing_day", Query: "data.ManufacturingDay" },
                {Property: "manufacturing_week", Query: "data.ManufacturingWeek" },
                {Property: "manufacturing_year", Query: "data.ManufacturingYear" },
                {Property: "ppid", Query: "data.Ppid" },
                {Property: "predictive_failure_state", Query: "data.PredictiveFailState" },
                {Property: "raid_status", Query: "data.RaidStatus" },
                {Property: "sas_address", Query: "data.SasAddress" },
                {Property: "slot", Query: "data.Slot" },
                {Property: "used_size", Query: "data.UsedSize" }],
                Exec: [ "echo('GOT AN EVENT THAT MATCHED - DRIVE')" ]
                }

    idrac_storage_adapter_map:
      - { SelectEventType: "StorageAdapterEvent", Select: true,# "data.ObjectHeader.FQDD == EVENT_FQDD",
            ModelUpdate: [
                {Property: "name", Query: "data.RaidObjHeader.ObjName" },
                {Property: "description", Query: "data.Manufacturer" },
                {Property: "firmware_version", Query: "data.FirmwareVersion" },
                {Property: "manufacturer", Query: "data.Manufacturer" },
                {Property: "member_id", Query: "data.Id" },
                {Property: "model", Query: "data.ObjectHeader.Struct" },
                {Property: "Id", Query: "data.ObjectHeader.FQDD" },
                {Property: "speed", Query: "data.CapableSpeeds" }],
                Exec: [ "echo('GOT AN EVENT THAT MATCHED - ADAPTER')" ],
                Exec: [ "echo('$data.ObjectHeader.FQDD , $EVENT_FQDD')" ]
                }

    idrac_storage_volume_map:
      - { SelectEventType: "StorageVirtualEvent", Select: "data.ObjectHeader.FQDD == EVENT_FQDD",
            ModelUpdate: [
                {Property: "name", Query: "data.RaidObjHeader.ObjName" },
                {Property: "block_size", Query: "data.BlockSize" },
                {Property: "capacity", Query: "data.Capacity" },
                {Property: "description", Query: "data.RaidObjHeader.ObjName" },
                {Property: "encrypted", Query: "data.Encrypted" },
                {Property: "optimum_io_size_bytes", Query: "data.OptimumIoSize*512" },
                {Property: "volume_type", Query: "data.VolumeType" },
                {Property: "unique_name", Query: "data.ObjectHeader.FQDD" }],
                Exec: [ "echo('GOT AN EVENT THAT MATCHED - VOLUME')" ]
                }

    idrac_storage_enclosure_map:
      - { SelectEventType: "StorageEnclosureEvent", Select: true,#"data.ObjectHeader.FQDD == EVENT_FQDD",
            ModelUpdate: [
                {Property: "asset_tag", Query: "data.AssetTag" },
                {Property: "chassis_type", Query: "data.ChassisType" },
                {Property: "description", Query: "data.RaidObjHeader.ObjName" },
                {Property: "unique_name", Query: "data.DeviceId" },
                {Property: "manufacturer", Query: "data.Manufacturer" },
                {Property: "model", Query: "data.RaidObjHeader.ObjName" },
                {Property: "name", Query: "data.RaidObjHeader.ObjName" },
                {Property: "part_number", Query: "data.PartNumber" },
                {Property: "power_state", Query: "data.PowerState" },
                {Property: "sku", Query: "data.Sku" },
                {Property: "serial_number", Query: "data.Serial" },
                {Property: "connector", Query: "data.Connector" },
                {Property: "service_tag", Query: "data.ServiceTag" },
                {Property: "slot_count", Query: "data.SlotCount" },
                {Property: "version", Query: "data.Version" },
                {Property: "wired_order", Query: "data.WiredOrder" }],
                Exec: [ "echo('#### %d, @@@@@ %d', data.ObjectHeader.FQDD, EVENT_FQDD)" ],
                Exec: [ "echo('GOT AN EVENT THAT MATCHED - ENCLOSURE')" ]
                }


                # we'll get to the mappers below soon, for now they are unused


    storage_volume_uris:
      - { SelectEventType: "RedfishResource:created",
          Select: "nohash(data.ResourceURI) && data.ResourceURI == rooturi + '/Systems/System.Embedded.1/Storage/' + URI_FQDD + '/Volumes' ",
          ModelUpdate: [ {Property: "storage_volume_uris", Query: "addtoset(model, propname, data.ResourceURI)"} ]}
      - { SelectEventType: "RedfishResource:removed",
          Select: "nohash(data.ResourceURI) && data.ResourceURI == rooturi + '/Systems/System.Embedded.1/Storage/' + URI_FQDD + '/Volumes' ",
          ModelUpdate: [ {Property: "storage_volume_uris", Query: "removefromset(model, propname, data.ResourceURI)"} ]}

    storage_enclosure_uris:
      - { SelectEventType: "RedfishResource:created",
          Select: "nohash(data.ResourceURI) && data.ResourceURI == rooturi + '/Chassis/' + URI_FQDD ",
          ModelUpdate: [ {Property: "storage_enclosure_uris", Query: "addtoset(model, propname, data.ResourceURI)"} ]}
      - { SelectEventType: "RedfishResource:removed",
          Select: "nohash(data.ResourceURI) && data.ResourceURI == rooturi + '/Chassis/' + URI_FQDD ",
          ModelUpdate: [ {Property: "storage_enclosure_uris", Query: "removefromset(model, propname, data.ResourceURI)"} ]}


# we dont have any AR Mappings right now
mappings:
