main:
    server_name: "dell_idrac"
    #options: "openbmc" | "dell_ec" | "mockup"

listen:
    - http::8081
    - https::8443
    - pprof::9080

session:
    timeout: 600

views:
  "rootview":
      "Logger": ["module", "root"]
      "Controllers":
        # This is for dynamic runtime instantiation of new chassis as they appear
        - "fn": "AM2"
          "params": {"modelname": "default", "cfgsection": "idrac_component_events", "uniquename": "'idrac_system_chassis_' + view.GetURI()"}
      "View":
        - "fn": "with_URI"
          "params": "'/redfish/v1'"
      "Aggregate": "root"
      "ExecPost": [
        "set_hash_value(serviceglobals, serviceglobalsmu, 'rootid', uuid)",
        "set_hash_value(serviceglobals, serviceglobalsmu, 'rooturi', view.GetURI())",
        "set_hash_value(serviceglobals, serviceglobalsmu, 'submittestmetricreport', submit_test_metric_report)",
        "instantiate('chassis')",
        "instantiate('systems')",
        "instantiate('managers')",
        "instantiate('accountservice')",
        "instantiate('roles')",
        "instantiate('accounts')",
        "instantiate('registries')",
        # we will eventually enable sessionservice, but need to do some work in ec.go to enable it first
        #"instantiate('sessionservice')",
        "instantiate('telemetry_service')",
      ]

  "chassis":
      "Logger": ["module", "Chassis"]
      "Models":
        "default":  {"members": "array()"}
      "Controllers":
        - "fn": "AM2"
          "params": {"modelname": "default", "cfgsection": "collection", "uniquename": "'collection_' + view.GetURI()", "passthru": {'collection_uri': 'view.GetURI()'} }

      "View":
        - "fn": "with_URI"
          "params": "rooturi + '/Chassis'"
        - "fn": "PublishResourceUpdatedEventsForModel"
          "params": "default"
        - "fn": "stdFormatters"
          "params":
      "Aggregate": "chassis"

  "systems":
      "Logger": ["module", "Systems"]
      "Models":
        "default":  {"members": "array()"}
      "Controllers":
        - "fn": "AM2"
          "params": {"modelname": "default", "cfgsection": "collection", "uniquename": "'collection_' + view.GetURI()", "passthru": {'collection_uri': 'view.GetURI()'} }
      "View":
        - "fn": "with_URI"
          "params": "rooturi + '/Systems'"
        - "fn": "PublishResourceUpdatedEventsForModel"
          "params": "default"
        - "fn": "stdFormatters"
          "params":
      "Aggregate": "systems"

  "managers":
      "Logger": ["module", "Managers"]
      "Models":
        "default":  {"members": "array()"}
      "Controllers":
        - "fn": "AM2"
          "params": {"modelname": "default", "cfgsection": "collection", "uniquename": "'collection_' + view.GetURI()", "passthru": {'collection_uri': 'view.GetURI()'} }
      "View":
        - "fn": "with_URI"
          "params": "rooturi + '/Managers'"
        - "fn": "PublishResourceUpdatedEventsForModel"
          "params": "default"
        - "fn": "stdFormatters"
          "params":
      "Aggregate": "managers"

  "accountservice":
      "Logger": ["module", "AccountService"]
      "Models":
        "default":  {}
      "Controllers":
      "View":
        - "fn": "with_URI"
          "params": "rooturi + '/AccountService' "
        - "fn": "PublishResourceUpdatedEventsForModel"
          "params": "default"
        - "fn": "stdFormatters"
          "params":
      "Aggregate": "accountservice"
      "ExecPost": [
        "set_hash_value(serviceglobals, serviceglobalsmu, 'actsvc_id', uuid)",
        "set_hash_value(serviceglobals, serviceglobalsmu, 'actsvc_uri', view.GetURI())"]

  "roles":
      "Logger": ["module", "Roles"]
      "Models":
        "default":  {"members": "array()"}
      "Controllers":
        - "fn": "AM2"
          "params": {"modelname": "default", "cfgsection": "collection", "uniquename": "'collection_' + view.GetURI()", "passthru": {'collection_uri': 'view.GetURI()'} }
      "View":
        - "fn": "with_URI"
          "params": "rooturi + '/AccountService/Roles'"
        - "fn": "PublishResourceUpdatedEventsForModel"
          "params": "default"
        - "fn": "stdFormatters"
          "params":
      "Aggregate": "roles"

  "accounts":
      "Logger": ["module", "Accounts"]
      "Models":
        "default":  {"members": "array()"}
      "Controllers":
        - "fn": "AM2"
          "params": {"modelname": "default", "cfgsection": "collection", "uniquename": "'collection_' + view.GetURI()", "passthru": {'collection_uri': 'view.GetURI()'} }
      "View":
        - "fn": "with_URI"
          "params": "rooturi + '/AccountService/Accounts'"
        - "fn": "PublishResourceUpdatedEventsForModel"
          "params": "default"
        - "fn": "stdFormatters"
          "params":
      "Aggregate": "accounts"

  "eventservice":
      "Logger": ["module", "eventservice"]
      "Models":
        "default": {
           "max_milliseconds_to_queue": "500",
           "max_events_to_queue": "20",
           "delivery_retry_attempts": "3",
           "delivery_retry_interval_seconds": "60",
           }
      "Controllers":
      "View":
        - "fn": "with_URI"
          "params": "rooturi + '/EventService'"
        - "fn": "PublishResourceUpdatedEventsForModel"
          "params": "default"
        - "fn": "etag"
          "params": ["max_milliseconds_to_queue", "max_events_to_queue", "delivery_retry_attempts", "delivery_retry_interval_seconds"]
        - "fn": "WithAction"
          "params": {"name": "submit.test.event", "uri": "/Actions/EventService.SubmitTestEvent", "actionFunction": "submittestevent"}
        - "fn": "linkModel"
          "params": {"existing": "default", "linkname": "etag"}
      "Aggregate": "eventservice"

  "subscriptioncollection":
      "Logger": ["module", "eventservice"]
      "Models":
        "default": {"members": "array()"}
      "Controllers":
        - "fn": "AM2"
          "params": {"modelname": "default", "cfgsection": "collection", "uniquename": "'collection_' + view.GetURI()", "passthru": {'collection_uri': 'view.GetURI()'} }
      "View":
        - "fn": "with_URI"
          "params": "eventsvc_uri + '/Subscriptions'"
        - "fn": "PublishResourceUpdatedEventsForModel"
          "params": "default"
        - "fn": "stdFormatters"
          "params":
      "Aggregate": "subscriptioncollection"

  "subscription":
      "Logger": ["module", "eventservice"]
      "Models":
        "default": {
          "destination": "destination",
          "protocol":    "protocol",
          "context":     "context",
          "event_types": "eventTypes",
        }
      "Controllers":
      "View":
        - "fn": "with_URI"
          "params": "eventsvc_uri + '/Subscriptions/' + uuid"
        - "fn": "PublishResourceUpdatedEventsForModel"
          "params": "default"
      "Aggregate": "subscription"

  "telemetry_service":
      "Logger": ["module", "telemetry_service"]
      "Models":
        "default": {}
      "Controllers":
      "View":
        - "fn": "with_URI"
          "params": "rooturi + '/TelemetryService'"
        - "fn": "PublishResourceUpdatedEventsForModel"
          "params": "default"
        - "fn": "etag"
          "params": []
        - "fn": "WithAction"
          "params": {"name": "submit.test.metric.report", "uri": "/Actions/TelemetryService.SubmitTestMetricReport", "actionFunction": "submittestmetricreport"}
        - "fn": "linkModel"
          "params": {"existing": "default", "linkname": "etag"}
      "Aggregate": "telemetry_service"
      "ExecPost": [
        "instantiate('metric_report_definitions', 'parenturi', view.GetURI())",
        "instantiate('metric_reports', 'parenturi', view.GetURI())",
      ]

  "metric_report_definitions":
      "Logger": ["module", "metric_report_definitions"]
      "Models":
        "default":  {"members": "array()"}
      "Controllers":
        - "fn": "AM2"
          "params": {"modelname": "default", "cfgsection": "collection", "uniquename": "'collection_' + view.GetURI()", "passthru": {'collection_uri': 'view.GetURI()'} }
      "View":
        - "fn": "with_URI"
          "params": "parenturi + '/MetricReportDefinitions'"
        - "fn": "stdFormatters"
          "params":
      "Aggregate": "metric_report_definitions"

  "metric_reports":
      "Logger": ["module", "metric_reports"]
      "Models":
        "default":  {"members": "array()"}
      "Controllers":
        - "fn": "AM2"
          "params": {"modelname": "default", "cfgsection": "collection", "uniquename": "'collection_' + view.GetURI()", "passthru": {'collection_uri': 'view.GetURI()'} }
      "View":
        - "fn": "with_URI"
          "params": "parenturi + '/MetricReports'"
        - "fn": "stdFormatters"
          "params":
      "Aggregate": "metric_reports"

  "sessionservice":
      "Logger": ["module", "session"]
      "Models":
        "default":  {"session_timeout": "30"}
      "Controllers":
#        - "fn": "ARMapper"
#          "params": {"modelname": "default", "cfgsection": "SessionService", "mappinguniquename": "rooturi + '/SessionService'", "AddToView": "ar_mapper"}
      "View":
        - "fn": "with_URI"
          "params": "rooturi + '/SessionService'"
        - "fn": "PublishResourceUpdatedEventsForModel"
          "params": "default"
        - "fn": "stdFormatters"
          "params":
      "Aggregate": "sessionservice"
      "ExecPost": [
        "set_hash_value(serviceglobals, serviceglobalsmu, 'sessionsvc_id', uuid)",
        "set_hash_value(serviceglobals, serviceglobalsmu, 'sessionsvc_uri', view.GetURI())",
      ]

  "sessioncollection":
      "Logger": ["module", "session"]
      "Models":
        "default":  {"members": "array()"}
      "Controllers":
        - "fn": "AM2"
          "params": {"modelname": "default", "cfgsection": "collection", "uniquename": "'collection_' + view.GetURI()", "passthru": {'collection_uri': 'view.GetURI()'} }
      "View":
        - "fn": "with_URI"
          "params": "rooturi + '/SessionService/Sessions'"
        - "fn": "PublishResourceUpdatedEventsForModel"
          "params": "default"
        - "fn": "stdFormatters"
          "params":
      "Aggregate": "sessioncollection"

  "session":
      "Logger": ["module", "session"]
      "Models":
      "Controllers":
      "View":
        - "fn": "with_URI"
          "params": "rooturi + '/SessionService/Sessions/' + uuid"
      "Aggregate": "session"

  "registries":
      "Logger": ["module", "registry"]
      "Models":
        "default":  {"members": "array()"}
      "Controllers":
        - "fn": "AM2"
          "params": {"modelname": "default", "cfgsection": "collection", "uniquename": "'collection_' + view.GetURI()", "passthru": {'collection_uri': 'view.GetURI()'} }
      "View":
        - "fn": "with_URI"
          "params": "rooturi + '/Registries'"
        - "fn": "stdFormatters"
          "params":
      "Aggregate": "registry_collection"

  "idrac_registry":
      "Logger": ["module", "registry"]
      "Models":
        "default":  {
          "id":          "'Messages'",
          "description": "'iDRAC Message Registry File locations'",
          "name":        "'iDRAC Message Registry File'",
          "type":        "'iDrac.1.5'",
          "languages":   "array('En')",
        }
      "Controllers":
      "View":
        - "fn": "with_URI"
          "params": "rooturi + '/Registries/Messages'"
        - "fn": "stdFormatters"
          "params":

  "base_registry":
      "Logger": ["module", "registry"]
      "Models":
        "default":  {
          "id":          "'BaseMessages'",
          "description": "'Base Message Registry File locations'",
          "name":        "'Base Message Registry File'",
          "type":        "'Base.1.3.8'",
          "languages":   "array('En')",
        }
      "Controllers":
      "View":
        - "fn": "with_URI"
          "params": "rooturi + '/Registries/BaseMessages'"
        - "fn": "withFormatter_count"
          "params":

  "mgr_attr_registry":
      "Logger": ["module", "registry"]
      "Models":
        "default":  {
          "id":          "'ManagerAttributeRegistry'",
          "description": "'Manager Attribute Registry File Locations'",
          "name":        "'Manager Attribute Registry File'",
          "type":        "'ManagerAttributeRegistry.1.0'",
          "languages":   "array('En')",
        }
      "Controllers":
      "View":
        - "fn": "with_URI"
          "params": "rooturi + '/Registries/ManagerAttributeRegistry'"
        - "fn": "stdFormatters"
          "params":

  "attributes":
      "Logger": ["module", "attributes"]
      "Models":
        "default":  {"unique_name": "FQDD", "unique_name_attr": "FQDD+'.Attributes'", "attributes": "add_attribute_property()"}
      "Controllers":
        - "fn": "ARDumper"
          "params": {"modelname": "default", "AddToView": true, "passthru": {"fqddlist": "array(FQDD)"}}
      "View":
        - "fn": "with_URI"
          "params": "parenturi + '/Attributes'"
        - "fn": "stdFormatters"
          "params":
      "Aggregate": "attributes_uri"


  "idrac_embedded":
      "Logger": ["module", "idrac_embedded"]
      "Models":
        "default":  {}
      "Controllers":
      "View":
        - "fn": "with_URI"
          "params": "rooturi + '/Managers/' + FQDD"
        - "fn": "PublishResourceUpdatedEventsForModel"
          "params": "default"
        - "fn": "stdFormatters"
          "params":
      "Aggregate": "idrac_embedded"
      "ExecPost": [
        "instantiate('attributes', 'parenturi', rooturi + '/Managers/' + FQDD, 'FQDD', FQDD)",
        "instantiate('attributes', 'parenturi', rooturi + '/Managers/' + 'System.Embedded.1', 'FQDD', 'System.Embedded.1')",
        "instantiate('attributes', 'parenturi', rooturi + '/Managers/' + 'LifecycleController.Embedded.1', 'FQDD', 'LifecycleController.Embedded.1')"
       ]

  "system_chassis":
      "Logger": ["module", "system_chassis"]
      "Models":
        "default":  {}
      "Controllers":
        - "fn": "ARDumper"
          "params": {"modelname": "default", "AddToView": true, "passthru": {"fqddlist": "array(FQDD)"}}
      "View":
        - "fn": "with_URI"
          "params": "rooturi + '/Chassis/' + FQDD "
        - "fn": "PublishResourceUpdatedEventsForModel"
          "params": "default"
        - "fn": "with_PumpHandledAction"
          "params": {"name": "chassis.reset", "uri": "/Actions/Chassis.Reset", "timeout": 30}
        - "fn": "stdFormatters"
          "params":
      "Aggregate": "idrac_system_chassis"
      "ExecPost": [
        "instantiate('power', 'parenturi', rooturi + '/Chassis/' + FQDD, 'FQDD', FQDD)",
        ]

  "idrac_system_embedded":
      "Logger": ["module", "system_embedded"]
      "Models":
        "default":  {}
      "Controllers":
      "View":
        - "fn": "with_URI"
          "params": "rooturi + '/Systems/' + FQDD "
        - "fn": "PublishResourceUpdatedEventsForModel"
          "params": "default"
        - "fn": "stdFormatters"
          "params":
      "Aggregate": "idrac_system_embedded"
      "ExecPost": [
        "instantiate('attributes', 'parenturi', rooturi + '/Systems/' + FQDD, 'FQDD', FQDD)",
        "instantiate('storage_collection', 'parenturi', rooturi + '/Systems/' + FQDD, 'FQDD', FQDD)",
       ]

  "power":
      "Logger": ["module", "Power"]
      "Models":
        "default":  { "unique_name": "'Power'"}
      "Controllers":
        - "fn": "ARMapper"
          "params": {"modelname": "default", "cfgsection": "Chassis/System.Chassis/Power", "mappinguniquename": "'chassis_power_mapper:' + FQDD", "AddToView": "ar_mapper"}
        - "fn": "AM2"
          "params": {"modelname": "default", "cfgsection": "power_control_uris", "uniquename": "'am2_control_uris:' + FQDD" }
        - "fn": "AM2"
          "params": {"modelname": "default", "cfgsection": "power_supply_uris", "uniquename": "'am2_psu_uris:' + FQDD" }
        - "fn": "AM2"
          "params": {"modelname": "default", "cfgsection": "voltage_sensor_uris", "uniquename": "'am2_voltage_uris:' + FQDD" }
      "View":
        - "fn": "with_URI"
          "params": "parenturi + '/Power'"
        - "fn": "PublishResourceUpdatedEventsForModel"
          "params": "default"
        - "fn": "stdFormatters"
          "params":
      "Aggregate": "power"
      "ExecPost": [
        "instantiate('power_control', 'FQDD', FQDD )",
        ]

  "power_control":
      "Logger": ["module", "PowerControl"]
      "Models":
        "default":  { "power_related_items": "find_uris_with_basename( rooturi + '/Chassis' )"}
      "Controllers":
        - "fn": "ARMapper"
          "params": {"modelname": "default", "cfgsection": "Chassis/System.Chassis/Power", "mappinguniquename": "'chassis_power_ctrl_mapper:' + FQDD", "AddToView": "ar_mapper"}
        - "fn": "AM2"
          "params": {"modelname": "default", "cfgsection": "power_control", "uniquename": "'am2_chassis_power_control_' + FQDD" }
      "View":
        - "fn": "with_URI"
          "params": "rooturi + '/Chassis/' + FQDD + '/Power/PowerControl'"
        - "fn": "PublishResourceUpdatedEventsForModel"
          "params": "default"
        - "fn": "stdFormatters"
          "params":
      "Aggregate": "power_control"

  "psu_slot":
      "Logger": ["module", "PSU.Slot"]
      "Models":
        "default":  {"unique_name": "FQDD", "unique_name_attr": "FQDD+'.Attributes'", "attributes": "add_attribute_property()"}
      "Controllers":
        - "fn": "AM2"
          "params": {"modelname": "default", "cfgsection": "power_supply", "uniquename": "'am2_chassis_psu_' + FQDD" }
        - "fn": "ARDumper"
          "params": {"modelname": "default", "AddToView": true, "passthru": {"fqddlist": "array(FQDD)"}}
      "View":
        - "fn": "with_URI"
          "params": "rooturi + '/Chassis/' + ChassisFQDD + '/Power/PowerSupplies/' + FQDD "
        - "fn": "linkModel"
          "params": {"existing": "default", "linkname": "swinv"}
        - "fn": "PublishResourceUpdatedEventsForModel"
          "params": "default"
        - "fn": "stdFormatters"
          "params":
      "Aggregate": "psu_slot"

  "voltage_sensor":
      "Logger": ["module", "voltage_sensor"]
      "Models":
        "default":  {"unique_name": "FQDD", "unique_name_attr": "FQDD+'.Attributes'", "attributes": "add_attribute_property()"}
      "Controllers":
        - "fn": "AM2"
          "params": {"modelname": "default", "cfgsection": "voltage_sensor_instance", "uniquename": "'am2_chassis_voltage_' + FQDD" }
        - "fn": "ARDumper"
          "params": {"modelname": "default", "AddToView": true, "passthru": {"fqddlist": "array(FQDD)"}}
      "View":
        - "fn": "with_URI"
          "params": "rooturi + '/Chassis/' + ChassisFQDD + '/Power/Sensors/Voltages/' + FQDD "
        - "fn": "linkModel"
          "params": {"existing": "default", "linkname": "swinv"}
        - "fn": "PublishResourceUpdatedEventsForModel"
          "params": "default"
        - "fn": "stdFormatters"
          "params":
      "Aggregate": "voltage_sensor"

  "storage_collection":
      "Logger": ["module", "StorageCollection"]
      "Models":
        "default":  {}
      "Controllers":
        - "fn": "AM2"
          "params": {"modelname": "default", "cfgsection": "collection", "uniquename": "'collection_' + view.GetURI()", "passthru": {'collection_uri': 'view.GetURI()'} }
      "View":
        - "fn": "with_URI"
          "params": "parenturi + '/Storage'"
        - "fn": "PublishResourceUpdatedEventsForModel"
          "params": "default"
        - "fn": "stdFormatters"
          "params":
      "Aggregate": "idrac_storage_collection"

  "idrac_storage_instance":
      "Logger": ["module", "StorageInstance"]
      "Models":
        "default":  {
                "storage_controller_uris_instance": "array(rooturi + '/Systems/' + ParentFQDD + '/StorageControllers/' + FQDD)",
                "enclosure_uris": "array(rooturi + '/Chassis/System.Embedded.1' )",
                }
      "Controllers":
        - "fn": "AM2"
          "params": {"modelname": "default", "cfgsection": "idrac_storage_encls_uris_for_instance", "uniquename": "'am2_meu__' + FQDD", "passthru": {}}
        - "fn": "AM2"
          "params": {"modelname": "default", "cfgsection": "idrac_storage_adapter_map", "uniquename": "'am2_idrac_storage_instance_map' + FQDD", "passthru": {"ParentFQDD": "ParentFQDD", "FQDD": "FQDD"}}
        - "fn": "AM2"
          "params": {"modelname": "default", "cfgsection": "idrac_storage_drive_uris_for_instance", "uniquename": "'am2_storage_instance_drive_uris_:' + ParentFQDD + ':' + FQDD", "passthru": {"ParentFQDD": "ParentFQDD", "FQDD": "FQDD"}}
      "View":
        - "fn": "with_URI"
          "params": "rooturi + '/Systems/' + ParentFQDD + '/Storage/' + FQDD "
        - "fn": "with_PumpHandledAction"
          "params": {"name": "storage.setencryptionkey", "uri": "/Actions/Storage.SetEncryptionKey", "timeout": 30}
        - "fn": "PublishResourceUpdatedEventsForModel"
          "params": "default"
        - "fn": "stdFormatters"
          "params":
      "Aggregate": "idrac_storage_instance"
      "ExecPost": [
        "instantiate('idrac_storage_volume_collection', 'parenturi', rooturi + '/Systems/' + ParentFQDD + '/Storage/' + FQDD , 'FQDD', FQDD, 'ParentFQDD', ParentFQDD)",
        ]

  "idrac_storage_drive":
      "Logger": ["module", "StorageDrive"]
      "Models":
        "default":  {}
      "Controllers":
        - "fn": "AM2"
          "params": {"modelname": "default", "cfgsection": "idrac_storage_drive_map", "uniquename": "'am2_idrac_storage_drive_map_' + FQDD", "passthru": {"ParentFQDD": "ParentFQDD", "FQDD": "FQDD"}}
        - "fn": "AM2"
          "params": {"modelname": "default", "cfgsection": "manage_enclosure_uris", "uniquename": "'am2_meu_drive_' + FQDD", "passthru": {}}
        - "fn": "AM2"
          "params": {"modelname": "default", "cfgsection": "idrac_storage_volume_uris_for_drive", "uniquename": "'am2_storage_drive_volume_uris:' + ParentFQDD + ':' + FQDD", "passthru": {"ParentFQDD": "ParentFQDD", "FQDD": "FQDD"}}
        - "fn": "AM2"
          "params": {"modelname": "default", "cfgsection": "manage_drive_identifiers", "uniquename": "'am2_drive_identifiers_' + FQDD", "passthru": {}}
      "View":
        - "fn": "with_URI"
          "params": "rooturi + '/Systems/' + ParentFQDD + '/Storage/Drives/' + FQDD "
        - "fn": "with_PumpHandledAction"
          "params": {"name": "drive.secureerase", "uri": "/Actions/Drive.SecureErase", "timeout": 30}
        - "fn": "PublishResourceUpdatedEventsForModel"
          "params": "default"
        - "fn": "stdFormatters"
          "params":
      "Aggregate": "idrac_storage_drive"

  "idrac_storage_enclosure":
      "Logger": ["module", "StorageEnclosure"]
      "Models":
        "default":  {"settings_uri": "rooturi + '/Chassis/' + FQDD + '/Settings'"}
      "Controllers":
        - "fn": "AM2"
          "params": {"modelname": "default", "cfgsection": "idrac_storage_enclosure_map", "uniquename": "'am2_idrac_storage_enclosure_map_' + FQDD"}
        - "fn": "AM2"
          "params": {"modelname": "default", "cfgsection": "idrac_drive_uris_for_encls", "uniquename": "'am2_storage_instance_drive_uris_:' + FQDD", "passthru": {"ParentFQDD": "'System.Embedded.1'", "FQDD": "FQDD"}}
        - "fn": "AM2"
          "params": {"modelname": "default", "cfgsection": "idrac_storage_uris_for_encls", "uniquename": "'am2_storage_enclsoure_storage_uris:' + FQDD", "passthru": {"ParentFQDD": "'System.Embedded.1'","FQDD": "FQDD"}}
      "View":
        - "fn": "with_URI"
          "params": "rooturi + '/Chassis/' + FQDD "
        - "fn": "PublishResourceUpdatedEventsForModel"
          "params": "default"
        - "fn": "stdFormatters"
          "params":
      "Aggregate": "idrac_storage_enclosure"
      "ExecPost": [
        "instantiate('idrac_storage_enclosure_settings', 'FQDD', FQDD)",
        ]

  "idrac_storage_enclosure_settings":
      "Logger": ["module", "StorageEnclosureSettings"]
      "Models":
        "default":  {}
      "Controllers":
      "View":
        - "fn": "with_URI"
          "params": "rooturi + '/Chassis/' + FQDD + '/Settings' "
        - "fn": "PublishResourceUpdatedEventsForModel"
          "params": "default"
        - "fn": "stdFormatters"
          "params":
      "Aggregate": "idrac_storage_enclosure_settings"

  "idrac_storage_controller":
      "Logger": ["module", "StorageController"]
      "Models":
        "default":  {}
      "Controllers":
        - "fn": "AM2"
          "params": {"modelname": "default", "cfgsection": "idrac_storage_adapter_map", "uniquename": "'am2_idrac_storage_controller_map_' + FQDD", "passthru": {"ParentFQDD": "ParentFQDD", "FQDD": "FQDD"}}
        - "fn": "AM2"
          "params": {"modelname": "default", "cfgsection": "manage_controller_identifiers", "uniquename": "'am2_controller_identifiers_' + FQDD", "passthru": {}}

      "View":
        - "fn": "with_URI"
          "params": "rooturi + '/Systems/' + ParentFQDD + '/StorageControllers/' + FQDD "
        - "fn": "PublishResourceUpdatedEventsForModel"
          "params": "default"
        - "fn": "stdFormatters"
          "params":
      "Aggregate": "idrac_storage_controller"

  "idrac_storage_volume_collection":
      "Logger": ["module", "StorageVolumeCollection"]
      "Models":
        "default":  {}
      "Controllers":
        - "fn": "AM2"
          "params": {"modelname": "default", "cfgsection": "volume_collection", "uniquename": "'collection_' + view.GetURI()", "passthru": {'collection_uri': "rooturi + '/Systems/' + ParentFQDD + '/Storage/Volumes'", 'ParentFQDD': 'ParentFQDD', 'FQDD': 'FQDD'} }
      "View":
        - "fn": "with_URI"
          "params": "parenturi + '/Volumes'"
        - "fn": "with_PumpHandledAction"
          "params": {"name": "volume.add", "uri":  "''", "timeout": 30}
        - "fn": "PublishResourceUpdatedEventsForModel"
          "params": "default"
        - "fn": "stdFormatters"
          "params":
      "Aggregate": "idrac_storage_volume_collection"

  "idrac_storage_volume":
      "Logger": ["module", "StorageVolume"]
      "Models":
        "default":  {"settings_uri": "rooturi + '/Systems/' + ParentFQDD + '/Storage/Volumes/' + FQDD + '/Settings'"}
      "Controllers":
        - "fn": "AM2"
          "params": {"modelname": "default", "cfgsection": "idrac_storage_volume_map", "uniquename": "'am2_idrac_storage_volume_map_' + FQDD", "passthru": {"ParentFQDD": "ParentFQDD", "FQDD": "FQDD"}}
        - "fn": "AM2"
          "params": {"modelname": "default", "cfgsection": "idrac_storage_drive_uris_for_vol", "uniquename": "'am2_storage_volume_drive_uris:' + ParentFQDD + ':' + FQDD", "passthru": {"ParentFQDD": "ParentFQDD", "FQDD": "FQDD"}}
        - "fn": "AM2"
          "params": {"modelname": "default", "cfgsection": "manage_volume_identifiers", "uniquename": "'am2_volume_identifiers_' + FQDD", "passthru": {}}
      "View":
        - "fn": "with_URI"
          "params": "rooturi + '/Systems/' + ParentFQDD + '/Storage/Volumes/' + FQDD"
        - "fn": "with_PumpHandledAction"
          "params": {"name": "volume.delete", "uri":  "''", "timeout": 30}
        - "fn": "with_PumpHandledAction"
          "params": {"name": "volume.checkconsistency", "uri":  "/Actions/Volume.CheckConsistency", "timeout": 30}
        - "fn": "with_PumpHandledAction"
          "params": {"name": "volume.initialize", "uri": "/Actions/Volume.Initialize", "timeout": 30}
        - "fn": "PublishResourceUpdatedEventsForModel"
          "params": "default"
        - "fn": "stdFormatters"
          "params":
      "Aggregate": "idrac_storage_volume"
      "ExecPost": [
        "instantiate('idrac_storage_volume_settings', 'FQDD', FQDD, 'ParentFQDD', ParentFQDD)",
        ]

  "idrac_storage_volume_settings":
      "Logger": ["module", "StorageVolumeSettings"]
      "Models":
        "default":  {}
      "Controllers":
      "View":
        - "fn": "with_URI"
          "params": "rooturi + '/Systems/' + ParentFQDD + '/Storage/Volumes/' + FQDD + '/Settings' "
        - "fn": "PublishResourceUpdatedEventsForModel"
          "params": "default"
        - "fn": "stdFormatters"
          "params":
      "Aggregate": "idrac_storage_volume_settings"

# <<==================================================================>>
# # everything above this point is basically correctly implemented and
# dynamically instantiated on demand based on component events

awesome_mapper:
    collection:
      - { SelectEventType: "RedfishResource:created",
          Select: "type == 'RedfishResource:created' && nohash(data.ResourceURI) && baseuri(data.ResourceURI) == collection_uri ",
          ModelUpdate: [ {Property: "members", Query: "addtoset(model, propname, data.ResourceURI)", Default: 0} ]}
      - { SelectEventType: "RedfishResource:removed",
          Select: "type == 'RedfishResource:removed' && nohash(data.ResourceURI) && baseuri(data.ResourceURI) == collection_uri ",
          ModelUpdate: [ {Property: "members", Query: "removefromset(model, propname, data.ResourceURI)", Default: 0} ]}

    idrac_component_events:
      - { SelectEventType: "IDRACComponentEvent",
          Select: "true",
          Exec: [
                "data.Type == 'iDRAC' && addidrac_embedded(data.FQDD)",
                "data.Type == 'System' && addsystem_embedded(data.FQDD)",
                "data.Type == 'Chassis' && addsystem_chassis(data.FQDD)",
                "data.Type == 'StorageAdapter' && addidrac_storage_instance(data.ParentFQDD + ':' + data.FQDD, data.ParentFQDD, data.FQDD)",
                "data.Type == 'StorageAdapter' && addidrac_storage_controller(data.ParentFQDD + ':' + data.FQDD, data.ParentFQDD, data.FQDD)",
                "data.Type == 'StorageDrive' && addidrac_storage_drive(data.ParentFQDD + ':' + data.FQDD, data.ParentFQDD, data.FQDD)",
                "data.Type == 'StorageEnclosure' && addidrac_storage_enclosure(data.FQDD)",
                "data.Type == 'StorageVolume' && addidrac_storage_volume(data.ParentFQDD + ':' + data.FQDD, data.ParentFQDD, data.FQDD)",
                "data.Type == 'IDRACPSU'      && addidracpsu(data.ParentFQDD + ':' + data.FQDD, data.ParentFQDD, data.FQDD)",
                "data.Type == 'IDRACvoltagesensors'  && addidracvoltagesensors(data.ParentFQDD + ':' + data.FQDD, data.ParentFQDD, data.FQDD)",
                ]}

    power_control_uris:
      - { SelectEventType: "RedfishResource:created",
          Select: "nohash(data.ResourceURI) && data.ResourceURI == rooturi + '/Chassis/' + FQDD + '/Power/PowerControl' ",
          ModelUpdate: [ {Property: "power_control_uris", Query: "addtoset(model, propname, data.ResourceURI)"} ]}
      - { SelectEventType: "RedfishResource:removed",
          Select: "nohash(data.ResourceURI) && data.ResourceURI == rooturi + '/Chassis/' + FQDD + '/Power/PowerControl' ",
          ModelUpdate: [ {Property: "power_control_uris", Query: "removefromset(model, propname, data.ResourceURI)"} ]}

    power_supply_uris:
      - { SelectEventType: "RedfishResource:created",
          Select: "nohash(data.ResourceURI) && baseuri(data.ResourceURI) == rooturi + '/Chassis/' + FQDD + '/Power/PowerSupplies' ",
          ModelUpdate: [ {Property: "power_supply_uris", Query: "addtoset(model, propname, data.ResourceURI)"} ]}
      - { SelectEventType: "RedfishResource:removed",
          Select: "nohash(data.ResourceURI) && baseuri(data.ResourceURI) == rooturi + '/Chassis/' + FQDD + '/Power/PowerSupplies' ",
          ModelUpdate: [ {Property: "power_supply_uris", Query: "removefromset(model, propname, data.ResourceURI)"} ]}

    voltage_sensor_uris:
      - { SelectEventType: "RedfishResource:created",
          Select: "nohash(data.ResourceURI) && baseuri(data.ResourceURI) == rooturi + '/Chassis/' + FQDD + '/Power/Sensors/Voltages' ",
          ModelUpdate: [ {Property: "voltage_sensor_uris", Query: "addtoset(model, propname, data.ResourceURI)"} ]}
      - { SelectEventType: "RedfishResource:removed",
          Select: "nohash(data.ResourceURI) && baseuri(data.ResourceURI) == rooturi + '/Chassis/' + FQDD + '/Power/Sensors/Voltages' ",
          ModelUpdate: [ {Property: "voltage_sensor_uris", Query: "removefromset(model, propname, data.ResourceURI)"} ]}

    idrac_storage_drive_uris:
      - { SelectEventType: "RedfishResource:created",
          Select: "nohash(data.ResourceURI) && baseuri(data.ResourceURI) == rooturi + '/Systems/' + ParentFQDD + '/Storage/Drives'",
          ModelUpdate: [ {Property: "drive_uris", Query: "addtoset(model, propname, data.ResourceURI)"} ],
          Exec: [ "echo('DRIVE LIST for FQDD == ' + FQDD )" ]
          }
      - { SelectEventType: "RedfishResource:removed",
          Select: "nohash(data.ResourceURI) && baseuri(data.ResourceURI) == rooturi + '/Systems/' + ParentFQDD + '/Storage/Drives'",
          ModelUpdate: [ {Property: "drive_uris", Query: "removefromset(model, propname, data.ResourceURI)"} ]}

    idrac_storage_drive_uris_for_instance:
      - { SelectEventType: "IDRACComponentEvent",
          Select: "data.Type == 'StorageAdapterAssociateDrive'",
          ModelUpdate: [ {Property: "drive_uris", Query: "addtoset(model, propname, rooturi + '/Systems/' + ParentFQDD + '/Storage/Drives/' + data.AssociateFQDD)"} ],
          Exec: [ "echo('Drive LIST - Instance. data.AssociateFQDD == ' + data.AssociateFQDD )" ]}
      - { SelectEventType: "RedfishResource:removed",
          Select: "nohash(data.ResourceURI) && baseuri(data.ResourceURI) == rooturi + '/Systems/' + ParentFQDD + '/Storage/Drives/' + data.AssociateFQDD",
          ModelUpdate: [ {Property: "encl_uris", Query: "removefromset(model, propname, data.ResourceURI)"} ]}

    idrac_storage_encls_uris_for_instance:
      - { SelectEventType: "IDRACComponentEvent",
          Select: "data.Type == 'StorageAdapterAssociateEnclosure'",
          ModelUpdate: [ {Property: "enclosure_uris", Query: "addtoset(model, propname, rooturi + '/Chassis/' + data.AssociateFQDD)"} ],
          Exec: [ "echo('Enclosure LIST - Instance. data.AssociateFQDD == ' + data.AssociateFQDD )" ]
          }
      - { SelectEventType: "RedfishResource:removed",
          Select: "nohash(data.ResourceURI) && baseuri(data.ResourceURI) == rooturi + '/Chassis/' + data.AssociateFQDD",
          ModelUpdate: [ {Property: "enclosure_uris", Query: "removefromset(model, propname, data.ResourceURI)"} ]}

    idrac_drive_uris_for_encls:
      - { SelectEventType: "IDRACComponentEvent",
          Select: "data.Type == 'StorageAdapterAssociateDrive'",
          ModelUpdate: [ {Property: "encl_drv_uris", Query: "addtoset(model, propname, rooturi + '/Systems/' + ParentFQDD + '/Storage/Drives/' + data.AssociateFQDD)"} ],
          Exec: [ "echo('DRIVE LIST - ENCLOSURE. data.AssociateFQDD == ' + data.AssociateFQDD )" ]}
      - { SelectEventType: "RedfishResource:removed",
          Select: "nohash(data.ResourceURI) && baseuri(data.ResourceURI) == rooturi + '/Systems/' + ParentFQDD + '/Storage/Drives/'  + data.AssociateFQDD",
          ModelUpdate: [ {Property: "encl_drv_uris", Query: "removefromset(model, propname, data.ResourceURI)"} ]}

    idrac_storage_uris_for_encls:
      - { SelectEventType: "IDRACComponentEvent",
          Select: "data.Type == 'StorageEnclosureAssociateAdapter'",
          ModelUpdate: [ {Property: "storage_uris", Query: "addtoset(model, propname, rooturi + '/Systems/' + ParentFQDD + '/Storage/' + data.AssociateFQDD)"} ],
          Exec: [ "echo('storage LIST - ENCLOSURE. data.AssociateFQDD == ' + data.AssociateFQDD )" ]}
      - { SelectEventType: "RedfishResource:removed",
          Select: "nohash(data.ResourceURI) && baseuri(data.ResourceURI) == rooturi + '/Systems/' + ParentFQDD + '/Storage/'  + data.AssociateFQDD",
          ModelUpdate: [ {Property: "storage_uris", Query: "removefromset(model, propname, data.ResourceURI)"} ]}

    idrac_storage_drive_uris_for_vol:
      - { SelectEventType: "IDRACComponentEvent",
          Select: "data.Type == 'StorageVolumeAssociateDrive'",
          ModelUpdate: [ {Property: "drive_uris", Query: "addtoset(model, propname, rooturi + '/Systems/' + ParentFQDD + '/Storage/Drives/' + data.AssociateFQDD)"} ],
          Exec: [ "echo('DRIVE LIST - VOLUME. data.AssociateFQDD == ' + data.AssociateFQDD )" ]
          }
      - { SelectEventType: "RedfishResource:removed",
          Select: "nohash(data.ResourceURI) && baseuri(data.ResourceURI) == rooturi + '/Systems/' + ParentFQDD + '/Storage/Drives/'  + data.AssociateFQDD",
          ModelUpdate: [ {Property: "drive_uris", Query: "removefromset(model, propname, data.ResourceURI)"} ]}

    idrac_storage_volume_uris_for_drive:
      - { SelectEventType: "IDRACComponentEvent",
          Select: "data.Type == 'StorageDriveAssociateVolume'",
          ModelUpdate: [ {Property: "volume_uris", Query: "addtoset(model, propname, rooturi + '/Systems/' + ParentFQDD + '/Storage/Volumes/' + data.AssociateFQDD)"} ],
          Exec: [ "echo('Volume LIST - DRIVE. data.AssociateFQDD == ' + data.AssociateFQDD )" ]
          }
      - { SelectEventType: "RedfishResource:removed",
          Select: "nohash(data.ResourceURI) && baseuri(data.ResourceURI) == rooturi + '/Systems/' + ParentFQDD + '/Storage/Volumes/'  + data.AssociateFQDD",
          ModelUpdate: [ {Property: "volume_uris", Query: "removefromset(model, propname, data.ResourceURI)"} ]}

    idrac_storage_controller_uris:
      - { SelectEventType: "RedfishResource:created",
          Select: "nohash(data.ResourceURI) && baseuri(data.ResourceURI) == rooturi + '/Systems/' + ParentFQDD + '/StorageControllers'",
          ModelUpdate: [ {Property: "storage_controller_uris", Query: "addtoset(model, propname, data.ResourceURI)"} ]}
      - { SelectEventType: "RedfishResource:removed",
          Select: "nohash(data.ResourceURI) && baseuri(data.ResourceURI) == rooturi + '/Systems/' + ParentFQDD + '/StorageControllers'",
          ModelUpdate: [ {Property: "storage_controller_uris", Query: "removefromset(model, propname, data.ResourceURI)"} ]}

    idrac_storage_drive_uris_for_instance:
      - { SelectEventType: "IDRACComponentEvent",
          Select: "data.Type == 'StorageAdapterAssociateDrive'",
          ModelUpdate: [ {Property: "drive_uris", Query: "addtoset(model, propname, rooturi + '/Systems/' + ParentFQDD + '/Storage/Drives/' + data.AssociateFQDD)"} ],
          Exec: [ "echo('Drive LIST - Instance. data.AssociateFQDD == ' + data.AssociateFQDD )" ]}
      - { SelectEventType: "RedfishResource:removed",
          Select: "nohash(data.ResourceURI) && baseuri(data.ResourceURI) == rooturi + '/Systems/' + ParentFQDD + '/Storage/Drives/' + data.AssociateFQDD",
          ModelUpdate: [ {Property: "encl_uris", Query: "removefromset(model, propname, data.ResourceURI)"} ]}

    # have to do this one differently because enclosures are just a "Chassis"
    # object and are hard to distinguish from every other chassis
    manage_enclosure_uris:
      - { SelectEventType: "IDRACComponentEvent",
          Select: "data.Type == 'StorageEnclosure'",
          ModelUpdate: [ {Property: "enclosure_uris", Query: "addtoset(model, propname, rooturi + '/Chassis/' + data.FQDD)"} ]}
      - { SelectEventType: "RedfishResource:removed",
          Select: "nohash(data.ResourceURI) && baseuri(data.ResourceURI) == rooturi + '/Chassis/'",
          ModelUpdate: [ {Property: "enclosure_uris", Query: "removefromset(model, propname, data.ResourceURI)"} ]}


    manage_controller_identifiers:
      - { SelectEventType: "StorageAdapterEvent",
          Select: "data.ObjectHeader.FQDD == EVENT_FQDD",
          ModelUpdate: [ {Property: "identifiers", Query: "identifier_gen(data.Wwn)"} ]}

    manage_drive_identifiers:
      - { SelectEventType: "StoragePhysicalEvent",
          Select: "data.ObjectHeader.FQDD == EVENT_FQDD",
          ModelUpdate: [ {Property: "identifiers", Query: "identifier_gen(data.SasAddress)"} ]}

    manage_volume_identifiers:
      - { SelectEventType: "StorageVirtualEvent",
          Select: "data.ObjectHeader.FQDD == EVENT_FQDD",
          ModelUpdate: [ {Property: "identifiers", Query: "identifier_gen(data.Description)"} ]}

    supported_device_protocols:
      - { SelectEventType: "IDRACComponentEvent",
          Select: "data.Type == 'StorageAdapater'",
          ModelUpdate: [ {Property: "deviceprotocols", Query: "addtolist(model, propname, rooturi + '/Systems/' + ParentFQDD + '/StorageControllers' + data.FQDD)"} ]}
      - { SelectEventType: "RedfishResource:removed",
          Select: "nohash(data.ResourceURI) && baseuri(data.ResourceURI) == rooturi + '/Systems/' + ParentFQDD + '/StorageControllers' + data.FQDD",
          ModelUpdate: [ {Property: "deviceprotocols", Query: "removefromset(model, propname, data.ResourceURI)"} ]}

    volume_collection:
        # the uri's for volumes are ambiguous, so we have to do extra tests.
        # have to test that resourceuri ENDS WITH the "FQDD" value (correspoding with the mapped storage controller)
      - { SelectEventType: "RedfishResource:created",
          Select: "nohash(data.ResourceURI) && baseuri(data.ResourceURI) == collection_uri && hassuffix(data.ResourceURI, ':' + FQDD)",
          ModelUpdate: [ {Property: "members", Query: "addtoset(model, propname, data.ResourceURI)", Default: 0} ] }
      - { SelectEventType: "RedfishResource:removed",
          Select: "nohash(data.ResourceURI) && baseuri(data.ResourceURI) == collection_uri && hassuffix(data.ResourceURI, ':' + FQDD)",
          ModelUpdate: [ {Property: "members", Query: "removefromset(model, propname, data.ResourceURI)", Default: 0} ]}

    power_control:
      - { SelectEventType: "PowerConsumptionDataObjEvent", Select: "true",
            ModelUpdate: [
                {Property: "energy_consumption_start_time", Query: "epoch_to_date(data.CwStartTime)" },
                {Property: "energy_consumption_kwh", Query: "int((data.CumulativeWatts)/1000)" },
                {Property: "headroom_watts", Query: "data.InstHeadRoom" },
                {Property: "max_peak_watts", Query: "data.PeakWatts" },
                {Property: "max_peak_watts_time", Query: "epoch_to_date(data.PwReadingTime)" },
                {Property: "min_peak_watts", Query: "data.MinWatts" },
                {Property: "min_peak_watts_time", Query: "epoch_to_date(data.MinwReadingTime)" },
                {Property: "peak_headroom_watts", Query: "data.PeakHeadRoom" },
                {Property: "power_requested_watts", Query: "data.Maxpower" },
                {Property: "consumed_watts", Query: "data.InstWattsPSU1_2" }]}
      - { SelectEventType: "AvgPowerConsumptionStatDataObjEvent", Select: "true",
            ModelUpdate: [
                {Property: "minPwrLastMin", Query: "data.MinPwrLastMin" },
                {Property: "maxPwrLastMin", Query: "data.MaxPwrLastMin" },
                {Property: "avgPwrLastMin", Query: "data.AvgPwrLastMin" }]}

    power_supply:
      - { SelectEventType: "PowerSupplyObjEvent", Select: "data.ObjectHeader.FQDD == DM_FQDD",
            ModelUpdate: [
                {Property: "name", Query: "zero_to_null(data.OffsetPSLocation)" },
                {Property: "member_id", Query: "data.ObjectHeader.FQDD" },
                {Property: "fwVer", Query: "zero_to_null(data.OffsetFwVer)" },
                {Property: "efficiency_percent", Query: "zero_to_null(data.CurrentInputVolts)" }, #EfficiencyPercent
                {Property: "hotpluggable", Query: "get_hotpluggable_value(data.BPMCapable)" },
                {Property: "input_pstype", Query: "get_ac_dc_value(data.PSType)" },
                {Property: "maximum_frequencyHz", Query: "zero_or_value(data.MaximumFreqHz)" },
                {Property: "maximum_voltage", Query: "data.MaximumVoltage" },
                {Property: "minimum_frequencyHz", Query: "zero_or_value(data.MinimumFreqHz)" },
                {Property: "minimum_voltage", Query: "data.MinimumVoltage" },
                {Property: "output_wattage", Query: "zero_or_value(data.OutputWatts)" },
                {Property: "poweroutputwatts", Query: "data.CurrentInputVolts" }, #DynamicoutputWatts
                {Property: "powerinputwatts", Query: "data.InputRatedWatts" },
                {Property: "lastpoweroutputwatts", Query: "" },
                {Property: "lineinputVoltage", Query: "null_lt_zero(data.CurrentInputVolts)" },
                {Property: "lineinputVoltagetype", Query: "get_input_voltagetype(data.PSType,data.CurrentInputVolts)" },
                {Property: "manufacturer", Query: "zero_to_null(data.BoardManufacturer)" },
                {Property: "model", Query: "zero_to_null(data.BoardProductName)" },
                {Property: "boardpartnumber", Query: "zero_to_null(data.BoardPartNumber)" },
                {Property: "powercapacitywatts", Query: "zero_or_value(data.U16POutMax)" },
                {Property: "powersupplytype", Query: "get_ac_dc_value(data.PSType)" },
                {Property: "serialnumber", Query: "data.BoardSerialNumber" },
                {Property: "sparepartnumber", Query: "data.BoardPartNumber" },
                {Property: "obj_state", Query: "get_ps_state(data.PSState)" },
                {Property: "obj_status", Query: "map_health_value(data.ObjectHeader.ObjStatus)" }]}

    voltage_sensor_instance:
      - { SelectEventType: "ProbeObjEvent", Select: "data.ObjectHeader.FQDD == DM_FQDD",
            ModelUpdate: [
                {Property: "member_id", Query: "data.ObjectHeader.FQDD" },
                {Property: "name", Query: "zero_to_null(data.OffsetProbeLocation)" },
                {Property: "upperthresholdfatal", Query: "null_lt_zero(data.ProbeThresholds.UnrThreshold)" },
                {Property: "upperthresholdcritical", Query: "null_lt_zero(data.ProbeThresholds.UcThreshold)" },
                {Property: "lowerthresholdnoncritical", Query: "null_lt_zero(data.ProbeThresholds.LncThreshold)" },
                {Property: "upperthresholdnoncritical", Query: "null_lt_zero(data.ProbeThresholds.UncThreshold)" },
                {Property: "lowerthresholdcritical", Query: "null_lt_zero(data.ProbeThresholds.LcThreshold)" },
                {Property: "lowerthresholdfatal", Query: "null_lt_zero(data.ProbeThresholds.LnrThreshold)" },
                {Property: "max_reading_range", Query: "zero_to_null(data.Type1MaxReadingRange)" },
                {Property: "min_reading_range", Query: "zero_to_null(data.Type1MinReadingRange)" },
                {Property: "physical_context", Query: "map_physical_context(data.EntityID)" },
                {Property: "reading_volts", Query: "null_lt_zero(data.ProbeReading)" },
                {Property: "sensor_number", Query: "zero_to_null(data.SensorNumber)" },
                {Property: "offsettarget_devkey", Query: "data.OffsetTargetDevKey" },
                {Property: "obj_status", Query: "map_health_value(data.ObjectHeader.ObjStatus)" }]}

    idrac_storage_drive_map:
        # idrac assumes all storage is attached to system.embedded.1, so there is no ParentFQDD check here.
      - { SelectEventType: "StoragePhysicalEvent", Select: "data.ObjectHeader.FQDD == EVENT_FQDD",
            ModelUpdate: [
                {Property: "block_size_bytes", Query: "data.BlockSize" },
                {Property: "capable_speed", Query: "capablespeeds(data.CapableSpeeds)" },
                {Property: "description", Query: "data.RaidObjHeader.ObjName" },
                {Property: "capacity", Query: "data.Capacity" },
                {Property: "encryption_ability", Query: "encryptn_ability(data.EncryptionAbility)" },
                {Property: "encryption_status", Query: "encryptn_status(data.EncryptionStatus)" },
                {Property: "failure_predicted", Query: "fail_predicted(data.FailurePredicted, data.RaidObjHeader.ObjAttributes)" },
                {Property: "hotspare_type", Query: "hotspare(data.Hotspare)" },
                {Property: "unique_name", Query: "data.Id" },
                {Property: "manufacturer", Query: "data.Manufacturer" },
                {Property: "media_type", Query: "mediatype(data.MediaType)" },
                {Property: "model", Query: "data.Model" },
                {Property: "name", Query: "data.RaidObjHeader.ObjName" },
                {Property: "negotiated_speed", Query: "negospeeds(data.NegotiatedSpeed)" },
                {Property: "part_number", Query: "data.PartNumber" },
                {Property: "predicted_media_life_left_percent", Query: "data.PredictedMediaLife" },
                {Property: "protocol", Query: "deviceprotocols(data.Protocol)" },
                {Property: "revision", Query: "data.Revision" },
                {Property: "rotation_speed", Query: "data.NominalMediumRotationRate" },
                {Property: "serial_number", Query: "data.Serial" },
                {Property: "drive_formfactor", Query: "driveformfactor(data.DriveFormFactor)" },
                {Property: "connector", Query: "data.Connector" },
                {Property: "free_size", Query: "data.FreeSize" },
                {Property: "manufacturing_day", Query: "data.ManufacturingDay" },
                {Property: "manufacturing_week", Query: "data.ManufacturingWeek" },
                {Property: "manufacturing_year", Query: "data.ManufacturingYear" },
                {Property: "ppid", Query: "data.Ppid" },
                {Property: "predictive_failure_state", Query: "smartalert(data.PredictiveFailState)" },
                {Property: "raid_status", Query: "raidstatus(data.RaidStatus)" },
                {Property: "sas_address", Query: "data.SasAddress" },
                {Property: "slot", Query: "data.Slot" },
                {Property: "used_size", Query: "data.UsedSize" },
                {Property: "health_rollup", Query: "map_health_value(data.ObjectHeader.ObjStatus)" },
                {Property: "health", Query: "map_health_value(data.ObjectHeader.ObjStatus)" }],
                Exec: [ "echo('GOT AN EVENT THAT MATCHED - DRIVE')" ]
                }

    idrac_storage_adapter_map:
      - { SelectEventType: "StorageAdapterEvent", Select: "data.ObjectHeader.FQDD == EVENT_FQDD",
            ModelUpdate: [
                {Property: "name", Query: "data.RaidObjHeader.ObjName" },
                {Property: "description", Query: "data.RaidObjHeader.ObjName" },
                {Property: "firmware_version", Query: "data.FirmwareVersion" },
                {Property: "manufacturer", Query: "data.Manufacturer" },
                {Property: "member_id", Query: "data.Id" },
                {Property: "model", Query: "data.RaidObjHeader.ObjName" },
                {Property: "Id", Query: "data.Id" },
                {Property: "speed", Query: "capablespeeds(data.CapableSpeeds)" },
                {Property: "health_rollup", Query: "map_health_value(data.RaidObjHeader.PrimaryStatus)" },
                {Property: "health", Query: "map_health_value(data.ObjectHeader.ObjStatus)" },
                {Property: "durable_name", Query: "durable_name(data.Wwn)" },
                {Property: "durable_format", Query: "durable_format(data.Wwn)" },
                {Property: "cache_size", Query: "data.CacheSizeInMb" },
                {Property: "cache_capability", Query: "cachecadecap(data.CachecadeCapability)" },
                {Property: "controller_firmware_version", Query: "data.ControllerFirmwareVersion" },
                {Property: "device_card_slot_type", Query: "slottype(data.DeviceCardSlotType)" },
                {Property: "driver_version", Query: "" },
                {Property: "encryption_capability", Query: "encryptionncap(data.EncryptionCapability)" },
                {Property: "encryption_mode", Query: "encryptionmode(data.EncryptionMode)" },
                {Property: "pci_slot", Query: "pcislot(data.Embedded, data.PCISlot)" },
                {Property: "patrol_read_state", Query: "patrolstate(data.PatrolReadState)" },
                {Property: "rollup_status", Query: "rollupstatus(data.ObjectHeader.ObjStatus)" },
                {Property: "security_status", Query: "securitystatus(data.SecurityStatus)" },
                {Property: "sliced_vd_capabiltiy", Query: "slicedvdcap(data.SlicedVDCapability)" },
                {Property: "supported_controller_protocols", Query: "controllerprotocols(data.SupportedControllerProtocols)" },
                {Property: "supported_device_protocols", Query: "supporteddeviceprotocols(data.SupportedDiskProtocols)" }],
                Exec: [ "echo('GOT AN EVENT THAT MATCHED - ADAPTER. EVENT_FQDD == ' + EVENT_FQDD + '  FQDD == ' + data.ObjectHeader.FQDD)" ]
                }

    idrac_storage_volume_map:
      - { SelectEventType: "StorageVirtualEvent", Select: "data.ObjectHeader.FQDD == EVENT_FQDD",
            ModelUpdate: [
                {Property: "name", Query: "data.RaidObjHeader.ObjName" },
                {Property: "block_size", Query: "data.BlockSize" },
                {Property: "capacity", Query: "data.Capacity" },
                {Property: "description", Query: "data.RaidObjHeader.ObjName" },
                {Property: "encrypted", Query: "encryptionstatus(data.Encrypted)" },
                {Property: "encryptiontypes", Query: "encryptiontypes(data)" },
                {Property: "optimum_io_size_bytes", Query: "data.OptimumIoSize * 512" },
                {Property: "volume_type", Query: "volumetype(data.VolumeType)" },
                {Property: "unique_name", Query: "data.Id" },
                {Property: "bus_protocol", Query: "deviceprotocols(data.Protocol)" },
                {Property: "cache_cade", Query: "cachecade(data.Cachecade)" },
                {Property: "disk_cache_policy", Query: "diskcachepolicy(data.DiskCachePolicy)" },
                {Property: "media_type", Query: "mediatype(data.MediaType)" },
                {Property: "lock_status", Query: "lockstatus(data.LockStatus)" },
                {Property: "read_cache_policy", Query: "readcachepolicy(data.ReadCachePolicy)" },
                {Property: "span_length", Query: "data.SpanLength" },
                {Property: "span_depth", Query: "data.SpanDepth" },
                {Property: "virtual_disk_target", Query: "data.VirtualDiskTargetID" },
                {Property: "write_cache_policy", Query: "writecachepolicy(data.WriteCachePolicy)" },
                {Property: "health_rollup", Query: "map_health_value(data.RaidObjHeader.DataObjHeader.ObjStatus)" },
                {Property: "health", Query: "map_health_value(data.RaidObjHeader.DataObjHeader.ObjStatus)" }],
                Exec: [ "echo('GOT AN EVENT THAT MATCHED - VOLUME. FQDD == ' + data.ObjectHeader.FQDD )" ]
                }

    idrac_storage_enclosure_map:
      - { SelectEventType: "StorageEnclosureEvent", Select: "data.ObjectHeader.FQDD == EVENT_FQDD",
            ModelUpdate: [
                {Property: "asset_tag", Query: "data.AssetTag" },
                {Property: "chassis_type", Query: "data.ChassisType" },
                {Property: "description", Query: "data.RaidObjHeader.ObjName" },
                {Property: "unique_name", Query: "data.DeviceId" },
                {Property: "manufacturer", Query: "data.Manufacturer" },
                {Property: "model", Query: "data.RaidObjHeader.ObjName" },
                {Property: "name", Query: "data.RaidObjHeader.ObjName" },
                {Property: "part_number", Query: "data.PartNumber" },
                {Property: "power_state", Query: "powerstate(data.PowerState)" },
                {Property: "sku", Query: "data.Sku" },
                {Property: "serial_number", Query: "data.Serial" },
                {Property: "connector", Query: "data.Connector" },
                {Property: "service_tag", Query: "data.ServiceTag" },
                {Property: "slot_count", Query: "data.SlotCount" },
                {Property: "version", Query: "data.Version" },
                {Property: "wired_order", Query: "data.WiredOrder" },
                {Property: "health_rollup", Query: "map_health_value(data.ObjectHeader.ObjStatus)" },
                {Property: "health", Query: "map_health_value(data.RaidObjHeader.PrimaryStatus)" }],
                Exec: [ "echo('GOT AN EVENT THAT MATCHED - ENCLOSURE: data.ObjectHeader.FQDD' + data.ObjectHeader.FQDD)" ]
                }

                # we'll get to the mappers below soon, for now they are unused

    storage_volume_uris:
      - { SelectEventType: "RedfishResource:created",
          Select: "nohash(data.ResourceURI) && data.ResourceURI == rooturi + '/Systems/System.Embedded.1/Storage/' + FQDD + '/Volumes' ",
          ModelUpdate: [ {Property: "storage_volume_uris", Query: "addtoset(model, propname, data.ResourceURI)"} ]}
      - { SelectEventType: "RedfishResource:removed",
          Select: "nohash(data.ResourceURI) && data.ResourceURI == rooturi + '/Systems/System.Embedded.1/Storage/' + FQDD + '/Volumes' ",
          ModelUpdate: [ {Property: "storage_volume_uris", Query: "removefromset(model, propname, data.ResourceURI)"} ]}

    storage_enclosure_uris:
      - { SelectEventType: "RedfishResource:created",
          Select: "nohash(data.ResourceURI) && data.ResourceURI == rooturi + '/Chassis/' + FQDD ",
          ModelUpdate: [ {Property: "storage_enclosure_uris", Query: "addtoset(model, propname, data.ResourceURI)"} ]}
      - { SelectEventType: "RedfishResource:removed",
          Select: "nohash(data.ResourceURI) && data.ResourceURI == rooturi + '/Chassis/' + FQDD ",
          ModelUpdate: [ {Property: "storage_enclosure_uris", Query: "removefromset(model, propname, data.ResourceURI)"} ]}


# we dont have any AR Mappings right now
mappings:
